{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport classnames from 'classnames'; //\n\nimport _ from './utils';\nimport Lifecycle from './lifecycle';\nimport Methods from './methods';\nimport defaultProps from './defaultProps';\nimport propTypes from './propTypes';\nexport var ReactTableDefaults = defaultProps;\n\nvar ReactTable = function (_Methods) {\n  _inherits(ReactTable, _Methods);\n\n  function ReactTable(props) {\n    _classCallCheck(this, ReactTable);\n\n    var _this = _possibleConstructorReturn(this, (ReactTable.__proto__ || Object.getPrototypeOf(ReactTable)).call(this, props));\n\n    _this.getResolvedState = _this.getResolvedState.bind(_this);\n    _this.getDataModel = _this.getDataModel.bind(_this);\n    _this.getSortedData = _this.getSortedData.bind(_this);\n    _this.fireFetchData = _this.fireFetchData.bind(_this);\n    _this.getPropOrState = _this.getPropOrState.bind(_this);\n    _this.getStateOrProp = _this.getStateOrProp.bind(_this);\n    _this.filterData = _this.filterData.bind(_this);\n    _this.sortData = _this.sortData.bind(_this);\n    _this.getMinRows = _this.getMinRows.bind(_this);\n    _this.onPageChange = _this.onPageChange.bind(_this);\n    _this.onPageSizeChange = _this.onPageSizeChange.bind(_this);\n    _this.sortColumn = _this.sortColumn.bind(_this);\n    _this.filterColumn = _this.filterColumn.bind(_this);\n    _this.resizeColumnStart = _this.resizeColumnStart.bind(_this);\n    _this.resizeColumnEnd = _this.resizeColumnEnd.bind(_this);\n    _this.resizeColumnMoving = _this.resizeColumnMoving.bind(_this);\n    return _this;\n  }\n\n  _createClass(ReactTable, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var resolvedState = this.getResolvedState();\n      var children = resolvedState.children,\n          className = resolvedState.className,\n          style = resolvedState.style,\n          getProps = resolvedState.getProps,\n          getTableProps = resolvedState.getTableProps,\n          getTheadGroupProps = resolvedState.getTheadGroupProps,\n          getTheadGroupTrProps = resolvedState.getTheadGroupTrProps,\n          getTheadGroupThProps = resolvedState.getTheadGroupThProps,\n          getTheadProps = resolvedState.getTheadProps,\n          getTheadTrProps = resolvedState.getTheadTrProps,\n          getTheadThProps = resolvedState.getTheadThProps,\n          getTheadFilterProps = resolvedState.getTheadFilterProps,\n          getTheadFilterTrProps = resolvedState.getTheadFilterTrProps,\n          getTheadFilterThProps = resolvedState.getTheadFilterThProps,\n          getTbodyProps = resolvedState.getTbodyProps,\n          getTrGroupProps = resolvedState.getTrGroupProps,\n          getTrProps = resolvedState.getTrProps,\n          getTdProps = resolvedState.getTdProps,\n          getTfootProps = resolvedState.getTfootProps,\n          getTfootTrProps = resolvedState.getTfootTrProps,\n          getTfootTdProps = resolvedState.getTfootTdProps,\n          getPaginationProps = resolvedState.getPaginationProps,\n          getLoadingProps = resolvedState.getLoadingProps,\n          getNoDataProps = resolvedState.getNoDataProps,\n          getResizerProps = resolvedState.getResizerProps,\n          showPagination = resolvedState.showPagination,\n          showPaginationTop = resolvedState.showPaginationTop,\n          showPaginationBottom = resolvedState.showPaginationBottom,\n          manual = resolvedState.manual,\n          loadingText = resolvedState.loadingText,\n          noDataText = resolvedState.noDataText,\n          sortable = resolvedState.sortable,\n          multiSort = resolvedState.multiSort,\n          resizable = resolvedState.resizable,\n          filterable = resolvedState.filterable,\n          pivotIDKey = resolvedState.pivotIDKey,\n          pivotValKey = resolvedState.pivotValKey,\n          pivotBy = resolvedState.pivotBy,\n          subRowsKey = resolvedState.subRowsKey,\n          aggregatedKey = resolvedState.aggregatedKey,\n          originalKey = resolvedState.originalKey,\n          indexKey = resolvedState.indexKey,\n          groupedByPivotKey = resolvedState.groupedByPivotKey,\n          loading = resolvedState.loading,\n          pageSize = resolvedState.pageSize,\n          page = resolvedState.page,\n          sorted = resolvedState.sorted,\n          filtered = resolvedState.filtered,\n          resized = resolvedState.resized,\n          expanded = resolvedState.expanded,\n          pages = resolvedState.pages,\n          onExpandedChange = resolvedState.onExpandedChange,\n          TableComponent = resolvedState.TableComponent,\n          TheadComponent = resolvedState.TheadComponent,\n          TbodyComponent = resolvedState.TbodyComponent,\n          TrGroupComponent = resolvedState.TrGroupComponent,\n          TrComponent = resolvedState.TrComponent,\n          ThComponent = resolvedState.ThComponent,\n          TdComponent = resolvedState.TdComponent,\n          TfootComponent = resolvedState.TfootComponent,\n          PaginationComponent = resolvedState.PaginationComponent,\n          LoadingComponent = resolvedState.LoadingComponent,\n          SubComponent = resolvedState.SubComponent,\n          NoDataComponent = resolvedState.NoDataComponent,\n          ResizerComponent = resolvedState.ResizerComponent,\n          ExpanderComponent = resolvedState.ExpanderComponent,\n          PivotValueComponent = resolvedState.PivotValueComponent,\n          PivotComponent = resolvedState.PivotComponent,\n          AggregatedComponent = resolvedState.AggregatedComponent,\n          FilterComponent = resolvedState.FilterComponent,\n          PadRowComponent = resolvedState.PadRowComponent,\n          resolvedData = resolvedState.resolvedData,\n          allVisibleColumns = resolvedState.allVisibleColumns,\n          headerGroups = resolvedState.headerGroups,\n          hasHeaderGroups = resolvedState.hasHeaderGroups,\n          sortedData = resolvedState.sortedData,\n          currentlyResizing = resolvedState.currentlyResizing; // Pagination\n\n      var startRow = pageSize * page;\n      var endRow = startRow + pageSize;\n      var pageRows = manual ? resolvedData : sortedData.slice(startRow, endRow);\n      var minRows = this.getMinRows();\n\n      var padRows = _.range(Math.max(minRows - pageRows.length, 0));\n\n      var hasColumnFooter = allVisibleColumns.some(function (d) {\n        return d.Footer;\n      });\n      var hasFilters = filterable || allVisibleColumns.some(function (d) {\n        return d.filterable;\n      });\n\n      var recurseRowsViewIndex = function recurseRowsViewIndex(rows) {\n        var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n        return [rows.map(function (row, i) {\n          index += 1;\n\n          var rowWithViewIndex = _extends({}, row, {\n            _viewIndex: index\n          });\n\n          var newPath = path.concat([i]);\n\n          if (rowWithViewIndex[subRowsKey] && _.get(expanded, newPath)) {\n            var _recurseRowsViewIndex = recurseRowsViewIndex(rowWithViewIndex[subRowsKey], newPath, index);\n\n            var _recurseRowsViewIndex2 = _slicedToArray(_recurseRowsViewIndex, 2);\n\n            rowWithViewIndex[subRowsKey] = _recurseRowsViewIndex2[0];\n            index = _recurseRowsViewIndex2[1];\n          }\n\n          return rowWithViewIndex;\n        }), index];\n      };\n\n      var _recurseRowsViewIndex3 = recurseRowsViewIndex(pageRows);\n\n      var _recurseRowsViewIndex4 = _slicedToArray(_recurseRowsViewIndex3, 1);\n\n      pageRows = _recurseRowsViewIndex4[0];\n      var canPrevious = page > 0;\n      var canNext = page + 1 < pages;\n\n      var rowMinWidth = _.sum(allVisibleColumns.map(function (d) {\n        var resizedColumn = resized.find(function (x) {\n          return x.id === d.id;\n        }) || {};\n        return _.getFirstDefined(resizedColumn.value, d.width, d.minWidth);\n      }));\n\n      var rowIndex = -1;\n\n      var finalState = _extends({}, resolvedState, {\n        startRow: startRow,\n        endRow: endRow,\n        pageRows: pageRows,\n        minRows: minRows,\n        padRows: padRows,\n        hasColumnFooter: hasColumnFooter,\n        canPrevious: canPrevious,\n        canNext: canNext,\n        rowMinWidth: rowMinWidth\n      });\n\n      var rootProps = _.splitProps(getProps(finalState, undefined, undefined, this));\n\n      var tableProps = _.splitProps(getTableProps(finalState, undefined, undefined, this));\n\n      var tBodyProps = _.splitProps(getTbodyProps(finalState, undefined, undefined, this));\n\n      var loadingProps = getLoadingProps(finalState, undefined, undefined, this);\n      var noDataProps = getNoDataProps(finalState, undefined, undefined, this); // Visual Components\n\n      var makeHeaderGroup = function makeHeaderGroup(column, i) {\n        var resizedValue = function resizedValue(col) {\n          return (resized.find(function (x) {\n            return x.id === col.id;\n          }) || {}).value;\n        };\n\n        var flex = _.sum(column.columns.map(function (col) {\n          return col.width || resizedValue(col) ? 0 : col.minWidth;\n        }));\n\n        var width = _.sum(column.columns.map(function (col) {\n          return _.getFirstDefined(resizedValue(col), col.width, col.minWidth);\n        }));\n\n        var maxWidth = _.sum(column.columns.map(function (col) {\n          return _.getFirstDefined(resizedValue(col), col.width, col.maxWidth);\n        }));\n\n        var theadGroupThProps = _.splitProps(getTheadGroupThProps(finalState, undefined, column, _this2));\n\n        var columnHeaderProps = _.splitProps(column.getHeaderProps(finalState, undefined, column, _this2));\n\n        var classes = [column.headerClassName, theadGroupThProps.className, columnHeaderProps.className];\n\n        var styles = _extends({}, column.headerStyle, theadGroupThProps.style, columnHeaderProps.style);\n\n        var rest = _extends({}, theadGroupThProps.rest, columnHeaderProps.rest);\n\n        var flexStyles = {\n          flex: flex + ' 0 auto',\n          width: _.asPx(width),\n          maxWidth: _.asPx(maxWidth)\n        };\n        return React.createElement(ThComponent, _extends({\n          key: i + '-' + column.id,\n          className: classnames(classes),\n          style: _extends({}, styles, flexStyles)\n        }, rest), _.normalizeComponent(column.Header, {\n          data: sortedData,\n          column: column\n        }));\n      };\n\n      var makeHeaderGroups = function makeHeaderGroups() {\n        var theadGroupProps = _.splitProps(getTheadGroupProps(finalState, undefined, undefined, _this2));\n\n        var theadGroupTrProps = _.splitProps(getTheadGroupTrProps(finalState, undefined, undefined, _this2));\n\n        return React.createElement(TheadComponent, _extends({\n          className: classnames('-headerGroups', theadGroupProps.className),\n          style: _extends({}, theadGroupProps.style, {\n            minWidth: rowMinWidth + 'px'\n          })\n        }, theadGroupProps.rest), React.createElement(TrComponent, _extends({\n          className: theadGroupTrProps.className,\n          style: theadGroupTrProps.style\n        }, theadGroupTrProps.rest), headerGroups.map(makeHeaderGroup)));\n      };\n\n      var makeHeader = function makeHeader(column, i) {\n        var resizedCol = resized.find(function (x) {\n          return x.id === column.id;\n        }) || {};\n        var sort = sorted.find(function (d) {\n          return d.id === column.id;\n        });\n        var show = typeof column.show === 'function' ? column.show() : column.show;\n\n        var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);\n\n        var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);\n\n        var theadThProps = _.splitProps(getTheadThProps(finalState, undefined, column, _this2));\n\n        var columnHeaderProps = _.splitProps(column.getHeaderProps(finalState, undefined, column, _this2));\n\n        var classes = [column.headerClassName, theadThProps.className, columnHeaderProps.className];\n\n        var styles = _extends({}, column.headerStyle, theadThProps.style, columnHeaderProps.style);\n\n        var rest = _extends({}, theadThProps.rest, columnHeaderProps.rest);\n\n        var isResizable = _.getFirstDefined(column.resizable, resizable, false);\n\n        var resizer = isResizable ? React.createElement(ResizerComponent, _extends({\n          onMouseDown: function onMouseDown(e) {\n            return _this2.resizeColumnStart(e, column, false);\n          },\n          onTouchStart: function onTouchStart(e) {\n            return _this2.resizeColumnStart(e, column, true);\n          }\n        }, getResizerProps('finalState', undefined, column, _this2))) : null;\n\n        var isSortable = _.getFirstDefined(column.sortable, sortable, false);\n\n        return React.createElement(ThComponent, _extends({\n          key: i + '-' + column.id,\n          className: classnames(classes, isResizable && 'rt-resizable-header', sort ? sort.desc ? '-sort-desc' : '-sort-asc' : '', isSortable && '-cursor-pointer', !show && '-hidden', pivotBy && pivotBy.slice(0, -1).includes(column.id) && 'rt-header-pivot'),\n          style: _extends({}, styles, {\n            flex: width + ' 0 auto',\n            width: _.asPx(width),\n            maxWidth: _.asPx(maxWidth)\n          }),\n          toggleSort: function toggleSort(e) {\n            if (isSortable) _this2.sortColumn(column, multiSort ? e.shiftKey : false);\n          }\n        }, rest), React.createElement('div', {\n          className: classnames(isResizable && 'rt-resizable-header-content')\n        }, _.normalizeComponent(column.Header, {\n          data: sortedData,\n          column: column\n        })), resizer);\n      };\n\n      var makeHeaders = function makeHeaders() {\n        var theadProps = _.splitProps(getTheadProps(finalState, undefined, undefined, _this2));\n\n        var theadTrProps = _.splitProps(getTheadTrProps(finalState, undefined, undefined, _this2));\n\n        return React.createElement(TheadComponent, _extends({\n          className: classnames('-header', theadProps.className),\n          style: _extends({}, theadProps.style, {\n            minWidth: rowMinWidth + 'px'\n          })\n        }, theadProps.rest), React.createElement(TrComponent, _extends({\n          className: theadTrProps.className,\n          style: theadTrProps.style\n        }, theadTrProps.rest), allVisibleColumns.map(makeHeader)));\n      };\n\n      var makeFilter = function makeFilter(column, i) {\n        var resizedCol = resized.find(function (x) {\n          return x.id === column.id;\n        }) || {};\n\n        var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);\n\n        var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);\n\n        var theadFilterThProps = _.splitProps(getTheadFilterThProps(finalState, undefined, column, _this2));\n\n        var columnHeaderProps = _.splitProps(column.getHeaderProps(finalState, undefined, column, _this2));\n\n        var classes = [column.headerClassName, theadFilterThProps.className, columnHeaderProps.className];\n\n        var styles = _extends({}, column.headerStyle, theadFilterThProps.style, columnHeaderProps.style);\n\n        var rest = _extends({}, theadFilterThProps.rest, columnHeaderProps.rest);\n\n        var filter = filtered.find(function (filter) {\n          return filter.id === column.id;\n        });\n        var ResolvedFilterComponent = column.Filter || FilterComponent;\n\n        var isFilterable = _.getFirstDefined(column.filterable, filterable, false);\n\n        return React.createElement(ThComponent, _extends({\n          key: i + '-' + column.id,\n          className: classnames(classes),\n          style: _extends({}, styles, {\n            flex: width + ' 0 auto',\n            width: _.asPx(width),\n            maxWidth: _.asPx(maxWidth)\n          })\n        }, rest), isFilterable ? _.normalizeComponent(ResolvedFilterComponent, {\n          column: column,\n          filter: filter,\n          onChange: function onChange(value) {\n            return _this2.filterColumn(column, value);\n          }\n        }, defaultProps.column.Filter) : null);\n      };\n\n      var makeFilters = function makeFilters() {\n        var theadFilterProps = _.splitProps(getTheadFilterProps(finalState, undefined, undefined, _this2));\n\n        var theadFilterTrProps = _.splitProps(getTheadFilterTrProps(finalState, undefined, undefined, _this2));\n\n        return React.createElement(TheadComponent, _extends({\n          className: classnames('-filters', theadFilterProps.className),\n          style: _extends({}, theadFilterProps.style, {\n            minWidth: rowMinWidth + 'px'\n          })\n        }, theadFilterProps.rest), React.createElement(TrComponent, _extends({\n          className: theadFilterTrProps.className,\n          style: theadFilterTrProps.style\n        }, theadFilterTrProps.rest), allVisibleColumns.map(makeFilter)));\n      };\n\n      var makePageRow = function makePageRow(row, i) {\n        var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var rowInfo = {\n          original: row[originalKey],\n          row: row,\n          index: row[indexKey],\n          viewIndex: rowIndex += 1,\n          pageSize: pageSize,\n          page: page,\n          level: path.length,\n          nestingPath: path.concat([i]),\n          aggregated: row[aggregatedKey],\n          groupedByPivot: row[groupedByPivotKey],\n          subRows: row[subRowsKey]\n        };\n\n        var isExpanded = _.get(expanded, rowInfo.nestingPath);\n\n        var trGroupProps = getTrGroupProps(finalState, rowInfo, undefined, _this2);\n\n        var trProps = _.splitProps(getTrProps(finalState, rowInfo, undefined, _this2));\n\n        return React.createElement(TrGroupComponent, _extends({\n          key: rowInfo.nestingPath.join('_')\n        }, trGroupProps), React.createElement(TrComponent, _extends({\n          className: classnames(trProps.className, row._viewIndex % 2 ? '-even' : '-odd'),\n          style: trProps.style\n        }, trProps.rest), allVisibleColumns.map(function (column, i2) {\n          var resizedCol = resized.find(function (x) {\n            return x.id === column.id;\n          }) || {};\n          var show = typeof column.show === 'function' ? column.show() : column.show;\n\n          var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);\n\n          var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);\n\n          var tdProps = _.splitProps(getTdProps(finalState, rowInfo, column, _this2));\n\n          var columnProps = _.splitProps(column.getProps(finalState, rowInfo, column, _this2));\n\n          var classes = [tdProps.className, column.className, columnProps.className];\n\n          var styles = _extends({}, tdProps.style, column.style, columnProps.style);\n\n          var cellInfo = _extends({}, rowInfo, {\n            isExpanded: isExpanded,\n            column: _extends({}, column),\n            value: rowInfo.row[column.id],\n            pivoted: column.pivoted,\n            expander: column.expander,\n            resized: resized,\n            show: show,\n            width: width,\n            maxWidth: maxWidth,\n            tdProps: tdProps,\n            columnProps: columnProps,\n            classes: classes,\n            styles: styles\n          });\n\n          var value = cellInfo.value;\n          var useOnExpanderClick = void 0;\n          var isBranch = void 0;\n          var isPreview = void 0;\n\n          var onExpanderClick = function onExpanderClick(e) {\n            var newExpanded = _.clone(expanded);\n\n            if (isExpanded) {\n              newExpanded = _.set(newExpanded, cellInfo.nestingPath, false);\n            } else {\n              newExpanded = _.set(newExpanded, cellInfo.nestingPath, {});\n            }\n\n            return _this2.setStateWithData({\n              expanded: newExpanded\n            }, function () {\n              return onExpandedChange && onExpandedChange(newExpanded, cellInfo.nestingPath, e, cellInfo);\n            });\n          }; // Default to a standard cell\n\n\n          var resolvedCell = _.normalizeComponent(column.Cell, cellInfo, value); // Resolve Renderers\n\n\n          var ResolvedAggregatedComponent = column.Aggregated || (!column.aggregate ? AggregatedComponent : column.Cell);\n          var ResolvedExpanderComponent = column.Expander || ExpanderComponent;\n          var ResolvedPivotValueComponent = column.PivotValue || PivotValueComponent;\n\n          var DefaultResolvedPivotComponent = PivotComponent || function (props) {\n            return React.createElement('div', null, React.createElement(ResolvedExpanderComponent, props), React.createElement(ResolvedPivotValueComponent, props));\n          };\n\n          var ResolvedPivotComponent = column.Pivot || DefaultResolvedPivotComponent; // Is this cell expandable?\n\n          if (cellInfo.pivoted || cellInfo.expander) {\n            // Make it expandable by defualt\n            cellInfo.expandable = true;\n            useOnExpanderClick = true; // If pivoted, has no subRows, and does not have a subComponent,\n            // do not make expandable\n\n            if (cellInfo.pivoted && !cellInfo.subRows && !SubComponent) {\n              cellInfo.expandable = false;\n            }\n          }\n\n          if (cellInfo.pivoted) {\n            // Is this column a branch?\n            isBranch = rowInfo.row[pivotIDKey] === column.id && cellInfo.subRows; // Should this column be blank?\n\n            isPreview = pivotBy.indexOf(column.id) > pivotBy.indexOf(rowInfo.row[pivotIDKey]) && cellInfo.subRows; // Pivot Cell Render Override\n\n            if (isBranch) {\n              // isPivot\n              resolvedCell = _.normalizeComponent(ResolvedPivotComponent, _extends({}, cellInfo, {\n                value: row[pivotValKey]\n              }), row[pivotValKey]);\n            } else if (isPreview) {\n              // Show the pivot preview\n              resolvedCell = _.normalizeComponent(ResolvedAggregatedComponent, cellInfo, value);\n            } else {\n              resolvedCell = null;\n            }\n          } else if (cellInfo.aggregated) {\n            resolvedCell = _.normalizeComponent(ResolvedAggregatedComponent, cellInfo, value);\n          }\n\n          if (cellInfo.expander) {\n            resolvedCell = _.normalizeComponent(ResolvedExpanderComponent, cellInfo, row[pivotValKey]);\n\n            if (pivotBy) {\n              if (cellInfo.groupedByPivot) {\n                resolvedCell = null;\n              }\n\n              if (!cellInfo.subRows && !SubComponent) {\n                resolvedCell = null;\n              }\n            }\n          }\n\n          var resolvedOnExpanderClick = useOnExpanderClick ? onExpanderClick : function () {}; // If there are multiple onClick events, make sure they don't\n          // override eachother. This should maybe be expanded to handle all\n          // function attributes\n\n          var interactionProps = {\n            onClick: resolvedOnExpanderClick\n          };\n\n          if (tdProps.rest.onClick) {\n            interactionProps.onClick = function (e) {\n              tdProps.rest.onClick(e, function () {\n                return resolvedOnExpanderClick(e);\n              });\n            };\n          }\n\n          if (columnProps.rest.onClick) {\n            interactionProps.onClick = function (e) {\n              columnProps.rest.onClick(e, function () {\n                return resolvedOnExpanderClick(e);\n              });\n            };\n          } // Return the cell\n\n\n          return React.createElement(TdComponent // eslint-disable-next-line react/no-array-index-key\n          , _extends({\n            key: i2 + '-' + column.id,\n            className: classnames(classes, !cellInfo.expandable && !show && 'hidden', cellInfo.expandable && 'rt-expandable', (isBranch || isPreview) && 'rt-pivot'),\n            style: _extends({}, styles, {\n              flex: width + ' 0 auto',\n              width: _.asPx(width),\n              maxWidth: _.asPx(maxWidth)\n            })\n          }, tdProps.rest, columnProps.rest, interactionProps), resolvedCell);\n        })), rowInfo.subRows && isExpanded && rowInfo.subRows.map(function (d, i) {\n          return makePageRow(d, i, rowInfo.nestingPath);\n        }), SubComponent && !rowInfo.subRows && isExpanded && SubComponent(rowInfo, function () {\n          var newExpanded = _.clone(expanded);\n\n          _.set(newExpanded, rowInfo.nestingPath, false);\n        }));\n      };\n\n      var makePadColumn = function makePadColumn(column, i) {\n        var resizedCol = resized.find(function (x) {\n          return x.id === column.id;\n        }) || {};\n        var show = typeof column.show === 'function' ? column.show() : column.show;\n\n        var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);\n\n        var flex = width;\n\n        var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);\n\n        var tdProps = _.splitProps(getTdProps(finalState, undefined, column, _this2));\n\n        var columnProps = _.splitProps(column.getProps(finalState, undefined, column, _this2));\n\n        var classes = [tdProps.className, column.className, columnProps.className];\n\n        var styles = _extends({}, tdProps.style, column.style, columnProps.style);\n\n        return React.createElement(TdComponent, _extends({\n          key: i + '-' + column.id,\n          className: classnames(classes, !show && 'hidden'),\n          style: _extends({}, styles, {\n            flex: flex + ' 0 auto',\n            width: _.asPx(width),\n            maxWidth: _.asPx(maxWidth)\n          })\n        }, tdProps.rest), _.normalizeComponent(PadRowComponent));\n      };\n\n      var makePadRow = function makePadRow(row, i) {\n        var trGroupProps = getTrGroupProps(finalState, undefined, undefined, _this2);\n\n        var trProps = _.splitProps(getTrProps(finalState, undefined, undefined, _this2));\n\n        return React.createElement(TrGroupComponent, _extends({\n          key: 'pad-' + i\n        }, trGroupProps), React.createElement(TrComponent, {\n          className: classnames('-padRow', (pageRows.length + i) % 2 ? '-even' : '-odd', trProps.className),\n          style: trProps.style || {}\n        }, allVisibleColumns.map(makePadColumn)));\n      };\n\n      var makeColumnFooter = function makeColumnFooter(column, i) {\n        var resizedCol = resized.find(function (x) {\n          return x.id === column.id;\n        }) || {};\n        var show = typeof column.show === 'function' ? column.show() : column.show;\n\n        var width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth);\n\n        var maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth);\n\n        var tFootTdProps = _.splitProps(getTfootTdProps(finalState, undefined, column, _this2));\n\n        var columnProps = _.splitProps(column.getProps(finalState, undefined, column, _this2));\n\n        var columnFooterProps = _.splitProps(column.getFooterProps(finalState, undefined, column, _this2));\n\n        var classes = [tFootTdProps.className, column.className, columnProps.className, columnFooterProps.className];\n\n        var styles = _extends({}, tFootTdProps.style, column.style, columnProps.style, columnFooterProps.style);\n\n        return React.createElement(TdComponent, _extends({\n          key: i + '-' + column.id,\n          className: classnames(classes, !show && 'hidden'),\n          style: _extends({}, styles, {\n            flex: width + ' 0 auto',\n            width: _.asPx(width),\n            maxWidth: _.asPx(maxWidth)\n          })\n        }, columnProps.rest, tFootTdProps.rest, columnFooterProps.rest), _.normalizeComponent(column.Footer, {\n          data: sortedData,\n          column: column\n        }));\n      };\n\n      var makeColumnFooters = function makeColumnFooters() {\n        var tFootProps = _.splitProps(getTfootProps(finalState, undefined, undefined, _this2));\n\n        var tFootTrProps = _.splitProps(getTfootTrProps(finalState, undefined, undefined, _this2));\n\n        return React.createElement(TfootComponent, _extends({\n          className: tFootProps.className,\n          style: _extends({}, tFootProps.style, {\n            minWidth: rowMinWidth + 'px'\n          })\n        }, tFootProps.rest), React.createElement(TrComponent, _extends({\n          className: classnames(tFootTrProps.className),\n          style: tFootTrProps.style\n        }, tFootTrProps.rest), allVisibleColumns.map(makeColumnFooter)));\n      };\n\n      var makePagination = function makePagination(isTop) {\n        var paginationProps = _.splitProps(getPaginationProps(finalState, undefined, undefined, _this2));\n\n        return React.createElement(PaginationComponent, _extends({}, resolvedState, {\n          pages: pages,\n          canPrevious: canPrevious,\n          canNext: canNext,\n          onPageChange: _this2.onPageChange,\n          onPageSizeChange: _this2.onPageSizeChange,\n          className: paginationProps.className,\n          style: paginationProps.style,\n          isTop: isTop\n        }, paginationProps.rest));\n      };\n\n      var makeTable = function makeTable() {\n        return React.createElement('div', _extends({\n          className: classnames('ReactTable', className, rootProps.className),\n          style: _extends({}, style, rootProps.style)\n        }, rootProps.rest), showPagination && showPaginationTop ? React.createElement('div', {\n          className: 'pagination-top'\n        }, makePagination(true)) : null, React.createElement(TableComponent, _extends({\n          className: classnames(tableProps.className, currentlyResizing ? 'rt-resizing' : ''),\n          style: tableProps.style\n        }, tableProps.rest), hasHeaderGroups ? makeHeaderGroups() : null, makeHeaders(), hasFilters ? makeFilters() : null, React.createElement(TbodyComponent, _extends({\n          className: classnames(tBodyProps.className),\n          style: _extends({}, tBodyProps.style, {\n            minWidth: rowMinWidth + 'px'\n          })\n        }, tBodyProps.rest), pageRows.map(function (d, i) {\n          return makePageRow(d, i);\n        }), padRows.map(makePadRow)), hasColumnFooter ? makeColumnFooters() : null), showPagination && showPaginationBottom ? React.createElement('div', {\n          className: 'pagination-bottom'\n        }, makePagination(false)) : null, !pageRows.length && React.createElement(NoDataComponent, noDataProps, _.normalizeComponent(noDataText)), React.createElement(LoadingComponent, _extends({\n          loading: loading,\n          loadingText: loadingText\n        }, loadingProps)));\n      }; // childProps are optionally passed to a function-as-a-child\n\n\n      return children ? children(finalState, makeTable, this) : makeTable();\n    }\n  }]);\n\n  return ReactTable;\n}(Methods(Lifecycle(Component)));\n\nReactTable.propTypes = propTypes;\nReactTable.defaultProps = defaultProps;\nexport default ReactTable;","map":{"version":3,"sources":["../src/index.js"],"names":["ReactTableDefaults","ReactTable","Methods","Lifecycle","propTypes","defaultProps","resolvedState","children","className","style","getProps","getTableProps","getTheadGroupProps","getTheadGroupTrProps","getTheadGroupThProps","getTheadProps","getTheadTrProps","getTheadThProps","getTheadFilterProps","getTheadFilterTrProps","getTheadFilterThProps","getTbodyProps","getTrGroupProps","getTrProps","getTdProps","getTfootProps","getTfootTrProps","getTfootTdProps","getPaginationProps","getLoadingProps","getNoDataProps","getResizerProps","showPagination","showPaginationTop","showPaginationBottom","manual","loadingText","noDataText","sortable","multiSort","resizable","filterable","pivotIDKey","pivotValKey","pivotBy","subRowsKey","aggregatedKey","originalKey","indexKey","groupedByPivotKey","loading","pageSize","page","sorted","filtered","resized","expanded","pages","onExpandedChange","TableComponent","TheadComponent","TbodyComponent","TrGroupComponent","TrComponent","ThComponent","TdComponent","TfootComponent","PaginationComponent","LoadingComponent","SubComponent","NoDataComponent","ResizerComponent","ExpanderComponent","PivotValueComponent","PivotComponent","AggregatedComponent","FilterComponent","PadRowComponent","resolvedData","allVisibleColumns","headerGroups","hasHeaderGroups","sortedData","currentlyResizing","startRow","endRow","pageRows","minRows","padRows","_","Math","hasColumnFooter","d","hasFilters","recurseRowsViewIndex","path","index","_viewIndex","newPath","rowWithViewIndex","canPrevious","canNext","rowMinWidth","resizedColumn","x","rowIndex","rootProps","tableProps","tBodyProps","loadingProps","noDataProps","makeHeaderGroup","resizedValue","col","flex","width","maxWidth","theadGroupThProps","columnHeaderProps","column","classes","styles","rest","flexStyles","i","classnames","data","makeHeaderGroups","theadGroupProps","theadGroupTrProps","minWidth","makeHeader","resizedCol","sort","show","theadThProps","isResizable","resizer","isSortable","e","makeHeaders","theadProps","theadTrProps","makeFilter","theadFilterThProps","filter","ResolvedFilterComponent","isFilterable","onChange","makeFilters","theadFilterProps","theadFilterTrProps","makePageRow","rowInfo","original","row","viewIndex","level","nestingPath","aggregated","groupedByPivot","subRows","isExpanded","trGroupProps","trProps","tdProps","columnProps","value","pivoted","expander","cellInfo","useOnExpanderClick","isBranch","isPreview","onExpanderClick","newExpanded","resolvedCell","ResolvedAggregatedComponent","ResolvedExpanderComponent","ResolvedPivotValueComponent","DefaultResolvedPivotComponent","ResolvedPivotComponent","resolvedOnExpanderClick","interactionProps","onClick","i2","makePadColumn","makePadRow","makeColumnFooter","tFootTdProps","columnFooterProps","makeColumnFooters","tFootProps","tFootTrProps","makePagination","paginationProps","isTop","makeTable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport classnames from 'classnames'\n//\nimport _ from './utils'\nimport Lifecycle from './lifecycle'\nimport Methods from './methods'\nimport defaultProps from './defaultProps'\nimport propTypes from './propTypes'\n\nexport const ReactTableDefaults = defaultProps\n\nexport default class ReactTable extends Methods(Lifecycle(Component)) {\n  static propTypes = propTypes\n  static defaultProps = defaultProps\n\n  constructor (props) {\n    super(props)\n\n    this.getResolvedState = this.getResolvedState.bind(this)\n    this.getDataModel = this.getDataModel.bind(this)\n    this.getSortedData = this.getSortedData.bind(this)\n    this.fireFetchData = this.fireFetchData.bind(this)\n    this.getPropOrState = this.getPropOrState.bind(this)\n    this.getStateOrProp = this.getStateOrProp.bind(this)\n    this.filterData = this.filterData.bind(this)\n    this.sortData = this.sortData.bind(this)\n    this.getMinRows = this.getMinRows.bind(this)\n    this.onPageChange = this.onPageChange.bind(this)\n    this.onPageSizeChange = this.onPageSizeChange.bind(this)\n    this.sortColumn = this.sortColumn.bind(this)\n    this.filterColumn = this.filterColumn.bind(this)\n    this.resizeColumnStart = this.resizeColumnStart.bind(this)\n    this.resizeColumnEnd = this.resizeColumnEnd.bind(this)\n    this.resizeColumnMoving = this.resizeColumnMoving.bind(this)\n  }\n\n  render () {\n    const resolvedState = this.getResolvedState()\n    const {\n      children,\n      className,\n      style,\n      getProps,\n      getTableProps,\n      getTheadGroupProps,\n      getTheadGroupTrProps,\n      getTheadGroupThProps,\n      getTheadProps,\n      getTheadTrProps,\n      getTheadThProps,\n      getTheadFilterProps,\n      getTheadFilterTrProps,\n      getTheadFilterThProps,\n      getTbodyProps,\n      getTrGroupProps,\n      getTrProps,\n      getTdProps,\n      getTfootProps,\n      getTfootTrProps,\n      getTfootTdProps,\n      getPaginationProps,\n      getLoadingProps,\n      getNoDataProps,\n      getResizerProps,\n      showPagination,\n      showPaginationTop,\n      showPaginationBottom,\n      manual,\n      loadingText,\n      noDataText,\n      sortable,\n      multiSort,\n      resizable,\n      filterable,\n      // Pivoting State\n      pivotIDKey,\n      pivotValKey,\n      pivotBy,\n      subRowsKey,\n      aggregatedKey,\n      originalKey,\n      indexKey,\n      groupedByPivotKey,\n      // State\n      loading,\n      pageSize,\n      page,\n      sorted,\n      filtered,\n      resized,\n      expanded,\n      pages,\n      onExpandedChange,\n      // Components\n      TableComponent,\n      TheadComponent,\n      TbodyComponent,\n      TrGroupComponent,\n      TrComponent,\n      ThComponent,\n      TdComponent,\n      TfootComponent,\n      PaginationComponent,\n      LoadingComponent,\n      SubComponent,\n      NoDataComponent,\n      ResizerComponent,\n      ExpanderComponent,\n      PivotValueComponent,\n      PivotComponent,\n      AggregatedComponent,\n      FilterComponent,\n      PadRowComponent,\n      // Data model\n      resolvedData,\n      allVisibleColumns,\n      headerGroups,\n      hasHeaderGroups,\n      // Sorted Data\n      sortedData,\n      currentlyResizing,\n    } = resolvedState\n\n    // Pagination\n    const startRow = pageSize * page\n    const endRow = startRow + pageSize\n    let pageRows = manual ? resolvedData : sortedData.slice(startRow, endRow)\n    const minRows = this.getMinRows()\n    const padRows = _.range(Math.max(minRows - pageRows.length, 0))\n\n    const hasColumnFooter = allVisibleColumns.some(d => d.Footer)\n    const hasFilters = filterable || allVisibleColumns.some(d => d.filterable)\n\n    const recurseRowsViewIndex = (rows, path = [], index = -1) => [\n      rows.map((row, i) => {\n        index += 1\n        const rowWithViewIndex = {\n          ...row,\n          _viewIndex: index,\n        }\n        const newPath = path.concat([i])\n        if (rowWithViewIndex[subRowsKey] && _.get(expanded, newPath)) {\n          [rowWithViewIndex[subRowsKey], index] = recurseRowsViewIndex(\n            rowWithViewIndex[subRowsKey],\n            newPath,\n            index\n          )\n        }\n        return rowWithViewIndex\n      }),\n      index,\n    ];\n    [pageRows] = recurseRowsViewIndex(pageRows)\n\n    const canPrevious = page > 0\n    const canNext = page + 1 < pages\n\n    const rowMinWidth = _.sum(\n      allVisibleColumns.map(d => {\n        const resizedColumn = resized.find(x => x.id === d.id) || {}\n        return _.getFirstDefined(resizedColumn.value, d.width, d.minWidth)\n      })\n    )\n\n    let rowIndex = -1\n\n    const finalState = {\n      ...resolvedState,\n      startRow,\n      endRow,\n      pageRows,\n      minRows,\n      padRows,\n      hasColumnFooter,\n      canPrevious,\n      canNext,\n      rowMinWidth,\n    }\n\n    const rootProps = _.splitProps(getProps(finalState, undefined, undefined, this))\n    const tableProps = _.splitProps(getTableProps(finalState, undefined, undefined, this))\n    const tBodyProps = _.splitProps(getTbodyProps(finalState, undefined, undefined, this))\n    const loadingProps = getLoadingProps(finalState, undefined, undefined, this)\n    const noDataProps = getNoDataProps(finalState, undefined, undefined, this)\n\n    // Visual Components\n\n    const makeHeaderGroup = (column, i) => {\n      const resizedValue = col => (resized.find(x => x.id === col.id) || {}).value\n      const flex = _.sum(\n        column.columns.map(col => (col.width || resizedValue(col) ? 0 : col.minWidth))\n      )\n      const width = _.sum(\n        column.columns.map(col => _.getFirstDefined(resizedValue(col), col.width, col.minWidth))\n      )\n      const maxWidth = _.sum(\n        column.columns.map(col => _.getFirstDefined(resizedValue(col), col.width, col.maxWidth))\n      )\n\n      const theadGroupThProps = _.splitProps(\n        getTheadGroupThProps(finalState, undefined, column, this)\n      )\n      const columnHeaderProps = _.splitProps(\n        column.getHeaderProps(finalState, undefined, column, this)\n      )\n\n      const classes = [\n        column.headerClassName,\n        theadGroupThProps.className,\n        columnHeaderProps.className,\n      ]\n\n      const styles = {\n        ...column.headerStyle,\n        ...theadGroupThProps.style,\n        ...columnHeaderProps.style,\n      }\n\n      const rest = {\n        ...theadGroupThProps.rest,\n        ...columnHeaderProps.rest,\n      }\n\n      const flexStyles = {\n        flex: `${flex} 0 auto`,\n        width: _.asPx(width),\n        maxWidth: _.asPx(maxWidth),\n      }\n\n      return (\n        <ThComponent\n          key={`${i}-${column.id}`}\n          className={classnames(classes)}\n          style={{\n            ...styles,\n            ...flexStyles,\n          }}\n          {...rest}\n        >\n          {_.normalizeComponent(column.Header, {\n            data: sortedData,\n            column,\n          })}\n        </ThComponent>\n      )\n    }\n\n    const makeHeaderGroups = () => {\n      const theadGroupProps = _.splitProps(\n        getTheadGroupProps(finalState, undefined, undefined, this)\n      )\n      const theadGroupTrProps = _.splitProps(\n        getTheadGroupTrProps(finalState, undefined, undefined, this)\n      )\n      return (\n        <TheadComponent\n          className={classnames('-headerGroups', theadGroupProps.className)}\n          style={{\n            ...theadGroupProps.style,\n            minWidth: `${rowMinWidth}px`,\n          }}\n          {...theadGroupProps.rest}\n        >\n          <TrComponent\n            className={theadGroupTrProps.className}\n            style={theadGroupTrProps.style}\n            {...theadGroupTrProps.rest}\n          >\n            {headerGroups.map(makeHeaderGroup)}\n          </TrComponent>\n        </TheadComponent>\n      )\n    }\n\n    const makeHeader = (column, i) => {\n      const resizedCol = resized.find(x => x.id === column.id) || {}\n      const sort = sorted.find(d => d.id === column.id)\n      const show = typeof column.show === 'function' ? column.show() : column.show\n      const width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth)\n      const maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth)\n      const theadThProps = _.splitProps(getTheadThProps(finalState, undefined, column, this))\n      const columnHeaderProps = _.splitProps(\n        column.getHeaderProps(finalState, undefined, column, this)\n      )\n\n      const classes = [column.headerClassName, theadThProps.className, columnHeaderProps.className]\n\n      const styles = {\n        ...column.headerStyle,\n        ...theadThProps.style,\n        ...columnHeaderProps.style,\n      }\n\n      const rest = {\n        ...theadThProps.rest,\n        ...columnHeaderProps.rest,\n      }\n\n      const isResizable = _.getFirstDefined(column.resizable, resizable, false)\n      const resizer = isResizable ? (\n        <ResizerComponent\n          onMouseDown={e => this.resizeColumnStart(e, column, false)}\n          onTouchStart={e => this.resizeColumnStart(e, column, true)}\n          {...getResizerProps('finalState', undefined, column, this)}\n        />\n      ) : null\n\n      const isSortable = _.getFirstDefined(column.sortable, sortable, false)\n\n      return (\n        <ThComponent\n          key={`${i}-${column.id}`}\n          className={classnames(\n            classes,\n            isResizable && 'rt-resizable-header',\n            sort ? (sort.desc ? '-sort-desc' : '-sort-asc') : '',\n            isSortable && '-cursor-pointer',\n            !show && '-hidden',\n            pivotBy && pivotBy.slice(0, -1).includes(column.id) && 'rt-header-pivot'\n          )}\n          style={{\n            ...styles,\n            flex: `${width} 0 auto`,\n            width: _.asPx(width),\n            maxWidth: _.asPx(maxWidth),\n          }}\n          toggleSort={e => {\n            if (isSortable) this.sortColumn(column, multiSort ? e.shiftKey : false)\n          }}\n          {...rest}\n        >\n          <div className={classnames(isResizable && 'rt-resizable-header-content')}>\n            {_.normalizeComponent(column.Header, {\n              data: sortedData,\n              column,\n            })}\n          </div>\n          {resizer}\n        </ThComponent>\n      )\n    }\n\n    const makeHeaders = () => {\n      const theadProps = _.splitProps(getTheadProps(finalState, undefined, undefined, this))\n      const theadTrProps = _.splitProps(getTheadTrProps(finalState, undefined, undefined, this))\n      return (\n        <TheadComponent\n          className={classnames('-header', theadProps.className)}\n          style={{\n            ...theadProps.style,\n            minWidth: `${rowMinWidth}px`,\n          }}\n          {...theadProps.rest}\n        >\n          <TrComponent\n            className={theadTrProps.className}\n            style={theadTrProps.style}\n            {...theadTrProps.rest}\n          >\n            {allVisibleColumns.map(makeHeader)}\n          </TrComponent>\n        </TheadComponent>\n      )\n    }\n\n    const makeFilter = (column, i) => {\n      const resizedCol = resized.find(x => x.id === column.id) || {}\n      const width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth)\n      const maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth)\n      const theadFilterThProps = _.splitProps(\n        getTheadFilterThProps(finalState, undefined, column, this)\n      )\n      const columnHeaderProps = _.splitProps(\n        column.getHeaderProps(finalState, undefined, column, this)\n      )\n\n      const classes = [\n        column.headerClassName,\n        theadFilterThProps.className,\n        columnHeaderProps.className,\n      ]\n\n      const styles = {\n        ...column.headerStyle,\n        ...theadFilterThProps.style,\n        ...columnHeaderProps.style,\n      }\n\n      const rest = {\n        ...theadFilterThProps.rest,\n        ...columnHeaderProps.rest,\n      }\n\n      const filter = filtered.find(filter => filter.id === column.id)\n\n      const ResolvedFilterComponent = column.Filter || FilterComponent\n\n      const isFilterable = _.getFirstDefined(column.filterable, filterable, false)\n\n      return (\n        <ThComponent\n          key={`${i}-${column.id}`}\n          className={classnames(classes)}\n          style={{\n            ...styles,\n            flex: `${width} 0 auto`,\n            width: _.asPx(width),\n            maxWidth: _.asPx(maxWidth),\n          }}\n          {...rest}\n        >\n          {isFilterable\n            ? _.normalizeComponent(\n                ResolvedFilterComponent,\n                {\n                  column,\n                  filter,\n                  onChange: value => this.filterColumn(column, value),\n                },\n                defaultProps.column.Filter\n              )\n            : null}\n        </ThComponent>\n      )\n    }\n\n    const makeFilters = () => {\n      const theadFilterProps = _.splitProps(\n        getTheadFilterProps(finalState, undefined, undefined, this)\n      )\n      const theadFilterTrProps = _.splitProps(\n        getTheadFilterTrProps(finalState, undefined, undefined, this)\n      )\n      return (\n        <TheadComponent\n          className={classnames('-filters', theadFilterProps.className)}\n          style={{\n            ...theadFilterProps.style,\n            minWidth: `${rowMinWidth}px`,\n          }}\n          {...theadFilterProps.rest}\n        >\n          <TrComponent\n            className={theadFilterTrProps.className}\n            style={theadFilterTrProps.style}\n            {...theadFilterTrProps.rest}\n          >\n            {allVisibleColumns.map(makeFilter)}\n          </TrComponent>\n        </TheadComponent>\n      )\n    }\n\n    const makePageRow = (row, i, path = []) => {\n      const rowInfo = {\n        original: row[originalKey],\n        row,\n        index: row[indexKey],\n        viewIndex: (rowIndex += 1),\n        pageSize,\n        page,\n        level: path.length,\n        nestingPath: path.concat([i]),\n        aggregated: row[aggregatedKey],\n        groupedByPivot: row[groupedByPivotKey],\n        subRows: row[subRowsKey],\n      }\n      const isExpanded = _.get(expanded, rowInfo.nestingPath)\n      const trGroupProps = getTrGroupProps(finalState, rowInfo, undefined, this)\n      const trProps = _.splitProps(getTrProps(finalState, rowInfo, undefined, this))\n      return (\n        <TrGroupComponent key={rowInfo.nestingPath.join('_')} {...trGroupProps}>\n          <TrComponent\n            className={classnames(trProps.className, row._viewIndex % 2 ? '-even' : '-odd')}\n            style={trProps.style}\n            {...trProps.rest}\n          >\n            {allVisibleColumns.map((column, i2) => {\n              const resizedCol = resized.find(x => x.id === column.id) || {}\n              const show = typeof column.show === 'function' ? column.show() : column.show\n              const width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth)\n              const maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth)\n              const tdProps = _.splitProps(getTdProps(finalState, rowInfo, column, this))\n              const columnProps = _.splitProps(column.getProps(finalState, rowInfo, column, this))\n\n              const classes = [tdProps.className, column.className, columnProps.className]\n\n              const styles = {\n                ...tdProps.style,\n                ...column.style,\n                ...columnProps.style,\n              }\n\n              const cellInfo = {\n                ...rowInfo,\n                isExpanded,\n                column: { ...column },\n                value: rowInfo.row[column.id],\n                pivoted: column.pivoted,\n                expander: column.expander,\n                resized,\n                show,\n                width,\n                maxWidth,\n                tdProps,\n                columnProps,\n                classes,\n                styles,\n              }\n\n              const value = cellInfo.value\n\n              let useOnExpanderClick\n              let isBranch\n              let isPreview\n\n              const onExpanderClick = e => {\n                let newExpanded = _.clone(expanded)\n                if (isExpanded) {\n                  newExpanded = _.set(newExpanded, cellInfo.nestingPath, false)\n                } else {\n                  newExpanded = _.set(newExpanded, cellInfo.nestingPath, {})\n                }\n\n                return this.setStateWithData(\n                  {\n                    expanded: newExpanded,\n                  },\n                  () =>\n                    onExpandedChange &&\n                    onExpandedChange(newExpanded, cellInfo.nestingPath, e, cellInfo)\n                )\n              }\n\n              // Default to a standard cell\n              let resolvedCell = _.normalizeComponent(column.Cell, cellInfo, value)\n\n              // Resolve Renderers\n              const ResolvedAggregatedComponent =\n                column.Aggregated || (!column.aggregate ? AggregatedComponent : column.Cell)\n              const ResolvedExpanderComponent = column.Expander || ExpanderComponent\n              const ResolvedPivotValueComponent = column.PivotValue || PivotValueComponent\n              const DefaultResolvedPivotComponent =\n                PivotComponent ||\n                (props => (\n                  <div>\n                    <ResolvedExpanderComponent {...props} />\n                    <ResolvedPivotValueComponent {...props} />\n                  </div>\n                ))\n              const ResolvedPivotComponent = column.Pivot || DefaultResolvedPivotComponent\n\n              // Is this cell expandable?\n              if (cellInfo.pivoted || cellInfo.expander) {\n                // Make it expandable by defualt\n                cellInfo.expandable = true\n                useOnExpanderClick = true\n                // If pivoted, has no subRows, and does not have a subComponent,\n                // do not make expandable\n                if (cellInfo.pivoted && !cellInfo.subRows && !SubComponent) {\n                  cellInfo.expandable = false\n                }\n              }\n\n              if (cellInfo.pivoted) {\n                // Is this column a branch?\n                isBranch = rowInfo.row[pivotIDKey] === column.id && cellInfo.subRows\n                // Should this column be blank?\n                isPreview =\n                  pivotBy.indexOf(column.id) > pivotBy.indexOf(rowInfo.row[pivotIDKey]) &&\n                  cellInfo.subRows\n                // Pivot Cell Render Override\n                if (isBranch) {\n                  // isPivot\n                  resolvedCell = _.normalizeComponent(\n                    ResolvedPivotComponent,\n                    {\n                      ...cellInfo,\n                      value: row[pivotValKey],\n                    },\n                    row[pivotValKey]\n                  )\n                } else if (isPreview) {\n                  // Show the pivot preview\n                  resolvedCell = _.normalizeComponent(ResolvedAggregatedComponent, cellInfo, value)\n                } else {\n                  resolvedCell = null\n                }\n              } else if (cellInfo.aggregated) {\n                resolvedCell = _.normalizeComponent(ResolvedAggregatedComponent, cellInfo, value)\n              }\n\n              if (cellInfo.expander) {\n                resolvedCell = _.normalizeComponent(\n                  ResolvedExpanderComponent,\n                  cellInfo,\n                  row[pivotValKey]\n                )\n                if (pivotBy) {\n                  if (cellInfo.groupedByPivot) {\n                    resolvedCell = null\n                  }\n                  if (!cellInfo.subRows && !SubComponent) {\n                    resolvedCell = null\n                  }\n                }\n              }\n\n              const resolvedOnExpanderClick = useOnExpanderClick ? onExpanderClick : () => {}\n\n              // If there are multiple onClick events, make sure they don't\n              // override eachother. This should maybe be expanded to handle all\n              // function attributes\n              const interactionProps = {\n                onClick: resolvedOnExpanderClick,\n              }\n\n              if (tdProps.rest.onClick) {\n                interactionProps.onClick = e => {\n                  tdProps.rest.onClick(e, () => resolvedOnExpanderClick(e))\n                }\n              }\n\n              if (columnProps.rest.onClick) {\n                interactionProps.onClick = e => {\n                  columnProps.rest.onClick(e, () => resolvedOnExpanderClick(e))\n                }\n              }\n\n              // Return the cell\n              return (\n                <TdComponent\n                  // eslint-disable-next-line react/no-array-index-key\n                  key={`${i2}-${column.id}`}\n                  className={classnames(\n                    classes,\n                    !cellInfo.expandable && !show && 'hidden',\n                    cellInfo.expandable && 'rt-expandable',\n                    (isBranch || isPreview) && 'rt-pivot'\n                  )}\n                  style={{\n                    ...styles,\n                    flex: `${width} 0 auto`,\n                    width: _.asPx(width),\n                    maxWidth: _.asPx(maxWidth),\n                  }}\n                  {...tdProps.rest}\n                  {...columnProps.rest}\n                  {...interactionProps}\n                >\n                  {resolvedCell}\n                </TdComponent>\n              )\n            })}\n          </TrComponent>\n          {rowInfo.subRows &&\n            isExpanded &&\n            rowInfo.subRows.map((d, i) => makePageRow(d, i, rowInfo.nestingPath))}\n          {SubComponent &&\n            !rowInfo.subRows &&\n            isExpanded &&\n            SubComponent(rowInfo, () => {\n              const newExpanded = _.clone(expanded)\n\n              _.set(newExpanded, rowInfo.nestingPath, false)\n            })}\n        </TrGroupComponent>\n      )\n    }\n\n    const makePadColumn = (column, i) => {\n      const resizedCol = resized.find(x => x.id === column.id) || {}\n      const show = typeof column.show === 'function' ? column.show() : column.show\n      const width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth)\n      const flex = width\n      const maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth)\n      const tdProps = _.splitProps(getTdProps(finalState, undefined, column, this))\n      const columnProps = _.splitProps(column.getProps(finalState, undefined, column, this))\n\n      const classes = [tdProps.className, column.className, columnProps.className]\n\n      const styles = {\n        ...tdProps.style,\n        ...column.style,\n        ...columnProps.style,\n      }\n\n      return (\n        <TdComponent\n          key={`${i}-${column.id}`}\n          className={classnames(classes, !show && 'hidden')}\n          style={{\n            ...styles,\n            flex: `${flex} 0 auto`,\n            width: _.asPx(width),\n            maxWidth: _.asPx(maxWidth),\n          }}\n          {...tdProps.rest}\n        >\n          {_.normalizeComponent(PadRowComponent)}\n        </TdComponent>\n      )\n    }\n\n    const makePadRow = (row, i) => {\n      const trGroupProps = getTrGroupProps(finalState, undefined, undefined, this)\n      const trProps = _.splitProps(getTrProps(finalState, undefined, undefined, this))\n      return (\n        <TrGroupComponent key={`pad-${i}`} {...trGroupProps}>\n          <TrComponent\n            className={classnames(\n              '-padRow',\n              (pageRows.length + i) % 2 ? '-even' : '-odd',\n              trProps.className\n            )}\n            style={trProps.style || {}}\n          >\n            {allVisibleColumns.map(makePadColumn)}\n          </TrComponent>\n        </TrGroupComponent>\n      )\n    }\n\n    const makeColumnFooter = (column, i) => {\n      const resizedCol = resized.find(x => x.id === column.id) || {}\n      const show = typeof column.show === 'function' ? column.show() : column.show\n      const width = _.getFirstDefined(resizedCol.value, column.width, column.minWidth)\n      const maxWidth = _.getFirstDefined(resizedCol.value, column.width, column.maxWidth)\n      const tFootTdProps = _.splitProps(getTfootTdProps(finalState, undefined, column, this))\n      const columnProps = _.splitProps(column.getProps(finalState, undefined, column, this))\n      const columnFooterProps = _.splitProps(\n        column.getFooterProps(finalState, undefined, column, this)\n      )\n\n      const classes = [\n        tFootTdProps.className,\n        column.className,\n        columnProps.className,\n        columnFooterProps.className,\n      ]\n\n      const styles = {\n        ...tFootTdProps.style,\n        ...column.style,\n        ...columnProps.style,\n        ...columnFooterProps.style,\n      }\n\n      return (\n        <TdComponent\n          key={`${i}-${column.id}`}\n          className={classnames(classes, !show && 'hidden')}\n          style={{\n            ...styles,\n            flex: `${width} 0 auto`,\n            width: _.asPx(width),\n            maxWidth: _.asPx(maxWidth),\n          }}\n          {...columnProps.rest}\n          {...tFootTdProps.rest}\n          {...columnFooterProps.rest}\n        >\n          {_.normalizeComponent(column.Footer, {\n            data: sortedData,\n            column,\n          })}\n        </TdComponent>\n      )\n    }\n\n    const makeColumnFooters = () => {\n      const tFootProps = _.splitProps(getTfootProps(finalState, undefined, undefined, this))\n      const tFootTrProps = _.splitProps(getTfootTrProps(finalState, undefined, undefined, this))\n      return (\n        <TfootComponent\n          className={tFootProps.className}\n          style={{\n            ...tFootProps.style,\n            minWidth: `${rowMinWidth}px`,\n          }}\n          {...tFootProps.rest}\n        >\n          <TrComponent\n            className={classnames(tFootTrProps.className)}\n            style={tFootTrProps.style}\n            {...tFootTrProps.rest}\n          >\n            {allVisibleColumns.map(makeColumnFooter)}\n          </TrComponent>\n        </TfootComponent>\n      )\n    }\n\n    const makePagination = isTop => {\n      const paginationProps = _.splitProps(\n        getPaginationProps(finalState, undefined, undefined, this)\n      )\n      return (\n        <PaginationComponent\n          {...resolvedState}\n          pages={pages}\n          canPrevious={canPrevious}\n          canNext={canNext}\n          onPageChange={this.onPageChange}\n          onPageSizeChange={this.onPageSizeChange}\n          className={paginationProps.className}\n          style={paginationProps.style}\n          isTop={isTop}\n          {...paginationProps.rest}\n        />\n      )\n    }\n\n    const makeTable = () => (\n      <div\n        className={classnames('ReactTable', className, rootProps.className)}\n        style={{\n          ...style,\n          ...rootProps.style,\n        }}\n        {...rootProps.rest}\n      >\n        {showPagination && showPaginationTop ? (\n          <div className=\"pagination-top\">{makePagination(true)}</div>\n        ) : null}\n        <TableComponent\n          className={classnames(tableProps.className, currentlyResizing ? 'rt-resizing' : '')}\n          style={tableProps.style}\n          {...tableProps.rest}\n        >\n          {hasHeaderGroups ? makeHeaderGroups() : null}\n          {makeHeaders()}\n          {hasFilters ? makeFilters() : null}\n          <TbodyComponent\n            className={classnames(tBodyProps.className)}\n            style={{\n              ...tBodyProps.style,\n              minWidth: `${rowMinWidth}px`,\n            }}\n            {...tBodyProps.rest}\n          >\n            {pageRows.map((d, i) => makePageRow(d, i))}\n            {padRows.map(makePadRow)}\n          </TbodyComponent>\n          {hasColumnFooter ? makeColumnFooters() : null}\n        </TableComponent>\n        {showPagination && showPaginationBottom ? (\n          <div className=\"pagination-bottom\">{makePagination(false)}</div>\n        ) : null}\n        {!pageRows.length && (\n          <NoDataComponent {...noDataProps}>{_.normalizeComponent(noDataText)}</NoDataComponent>\n        )}\n        <LoadingComponent loading={loading} loadingText={loadingText} {...loadingProps} />\n      </div>\n    )\n\n    // childProps are optionally passed to a function-as-a-child\n    return children ? children(finalState, makeTable, this) : makeTable()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}