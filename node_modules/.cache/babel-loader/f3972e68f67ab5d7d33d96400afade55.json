{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nexport default (function (Base) {\n  return function (_Base) {\n    _inherits(_class, _Base);\n\n    function _class(props) {\n      _classCallCheck(this, _class);\n\n      var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));\n\n      var defaultState = {\n        page: props.defaultPage,\n        pageSize: props.defaultPageSize,\n        sorted: props.defaultSorted,\n        expanded: props.defaultExpanded,\n        filtered: props.defaultFiltered,\n        resized: props.defaultResized,\n        currentlyResizing: false,\n        skipNextSort: false\n      };\n\n      var resolvedState = _this.getResolvedState(props, defaultState);\n\n      var dataModel = _this.getDataModel(resolvedState, true);\n\n      _this.state = _this.calculateNewResolvedState(dataModel);\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this.fireFetchData();\n      }\n    }, {\n      key: 'componentDidUpdate',\n      value: function componentDidUpdate(prevProps, prevState) {\n        var oldState = this.getResolvedState(prevProps, prevState);\n        var newState = this.getResolvedState(this.props, this.state); // Do a deep compare of new and old `defaultOption` and\n        // if they are different reset `option = defaultOption`\n\n        var defaultableOptions = ['sorted', 'filtered', 'resized', 'expanded'];\n        defaultableOptions.forEach(function (x) {\n          var defaultName = 'default' + (x.charAt(0).toUpperCase() + x.slice(1));\n\n          if (JSON.stringify(oldState[defaultName]) !== JSON.stringify(newState[defaultName])) {\n            newState[x] = newState[defaultName];\n          }\n        }); // If they change these table options, we need to reset defaults\n        // or else we could get into a state where the user has changed the UI\n        // and then disabled the ability to change it back.\n        // e.g. If `filterable` has changed, set `filtered = defaultFiltered`\n\n        var resettableOptions = ['sortable', 'filterable', 'resizable'];\n        resettableOptions.forEach(function (x) {\n          if (oldState[x] !== newState[x]) {\n            var baseName = x.replace('able', '');\n            var optionName = baseName + 'ed';\n            var defaultName = 'default' + (optionName.charAt(0).toUpperCase() + optionName.slice(1));\n            newState[optionName] = newState[defaultName];\n          }\n        }); // Props that trigger a data update\n\n        if (oldState.data !== newState.data || oldState.columns !== newState.columns || oldState.pivotBy !== newState.pivotBy || oldState.sorted !== newState.sorted || oldState.filtered !== newState.filtered) {\n          this.setStateWithData(this.getDataModel(newState, oldState.data !== newState.data));\n        }\n      }\n    }, {\n      key: 'calculateNewResolvedState',\n      value: function calculateNewResolvedState(dataModel) {\n        var oldState = this.getResolvedState();\n        var newResolvedState = this.getResolvedState({}, dataModel);\n        var freezeWhenExpanded = newResolvedState.freezeWhenExpanded; // Default to unfrozen state\n\n        newResolvedState.frozen = false; // If freezeWhenExpanded is set, check for frozen conditions\n\n        if (freezeWhenExpanded) {\n          // if any rows are expanded, freeze the existing data and sorting\n          var keys = Object.keys(newResolvedState.expanded);\n\n          for (var i = 0; i < keys.length; i += 1) {\n            if (newResolvedState.expanded[keys[i]]) {\n              newResolvedState.frozen = true;\n              break;\n            }\n          }\n        } // If the data isn't frozen and either the data or\n        // sorting model has changed, update the data\n\n\n        if (oldState.frozen && !newResolvedState.frozen || oldState.sorted !== newResolvedState.sorted || oldState.filtered !== newResolvedState.filtered || oldState.showFilters !== newResolvedState.showFilters || !newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData) {\n          // Handle collapseOnsortedChange & collapseOnDataChange\n          if (oldState.sorted !== newResolvedState.sorted && this.props.collapseOnSortingChange || oldState.filtered !== newResolvedState.filtered || oldState.showFilters !== newResolvedState.showFilters || oldState.sortedData && !newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData && this.props.collapseOnDataChange) {\n            newResolvedState.expanded = {};\n          }\n\n          Object.assign(newResolvedState, this.getSortedData(newResolvedState));\n        } // Set page to 0 if filters change\n\n\n        if (oldState.filtered !== newResolvedState.filtered) {\n          newResolvedState.page = 0;\n        } // Calculate pageSize all the time\n\n\n        if (newResolvedState.sortedData) {\n          newResolvedState.pages = newResolvedState.manual ? newResolvedState.pages : Math.ceil(newResolvedState.sortedData.length / newResolvedState.pageSize);\n          newResolvedState.page = newResolvedState.manual ? newResolvedState.page : Math.max(newResolvedState.page >= newResolvedState.pages ? newResolvedState.pages - 1 : newResolvedState.page, 0);\n        }\n\n        return newResolvedState;\n      }\n    }, {\n      key: 'setStateWithData',\n      value: function setStateWithData(dataModel, cb) {\n        var _this2 = this;\n\n        var oldState = this.getResolvedState();\n        var newResolvedState = this.calculateNewResolvedState(dataModel);\n        return this.setState(newResolvedState, function () {\n          if (cb) {\n            cb();\n          }\n\n          if (oldState.page !== newResolvedState.page || oldState.pageSize !== newResolvedState.pageSize || oldState.sorted !== newResolvedState.sorted || oldState.filtered !== newResolvedState.filtered) {\n            _this2.fireFetchData();\n          }\n        });\n      }\n    }]);\n\n    return _class;\n  }(Base);\n});","map":{"version":3,"sources":["../src/lifecycle.js"],"names":["defaultState","page","props","pageSize","sorted","expanded","filtered","resized","currentlyResizing","skipNextSort","resolvedState","dataModel","oldState","newState","defaultableOptions","defaultName","x","JSON","resettableOptions","baseName","optionName","newResolvedState","freezeWhenExpanded","keys","Object","i","Math","cb"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gBAAe,UAAA,IAAA,EAAA;AAAA,SAAA,UAAA,KAAA,EAAA;AAAA,IAAA,SAAA,CAAA,MAAA,EAAA,KAAA,CAAA;;AAEX,aAAA,MAAA,CAAA,KAAA,EAAoB;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AAAA,UAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,CAAA,MAAA,CAAA,SAAA,IAAA,MAAA,CAAA,cAAA,CAAA,MAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AAGlB,UAAMA,YAAAA,GAAe;AACnBC,QAAAA,IAAAA,EAAMC,KAAAA,CADa,WAAA;AAEnBC,QAAAA,QAAAA,EAAUD,KAAAA,CAFS,eAAA;AAGnBE,QAAAA,MAAAA,EAAQF,KAAAA,CAHW,aAAA;AAInBG,QAAAA,QAAAA,EAAUH,KAAAA,CAJS,eAAA;AAKnBI,QAAAA,QAAAA,EAAUJ,KAAAA,CALS,eAAA;AAMnBK,QAAAA,OAAAA,EAASL,KAAAA,CANU,cAAA;AAOnBM,QAAAA,iBAAAA,EAPmB,KAAA;AAQnBC,QAAAA,YAAAA,EAAc;AARK,OAArB;;AAUA,UAAMC,aAAAA,GAAgB,KAAA,CAAA,gBAAA,CAAA,KAAA,EAAtB,YAAsB,CAAtB;;AACA,UAAMC,SAAAA,GAAY,KAAA,CAAA,YAAA,CAAA,aAAA,EAAlB,IAAkB,CAAlB;;AAEA,MAAA,KAAA,CAAA,KAAA,GAAa,KAAA,CAAA,yBAAA,CAAb,SAAa,CAAb;AAhBkB,aAAA,KAAA;AAiBnB;;AAnBU,IAAA,YAAA,CAAA,MAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,mBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,iBAAA,GAqBU;AACnB,aAAA,aAAA;AACD;AAvBU,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,oBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,kBAAA,CAAA,SAAA,EAAA,SAAA,EAyB+B;AACxC,YAAMC,QAAAA,GAAW,KAAA,gBAAA,CAAA,SAAA,EAAjB,SAAiB,CAAjB;AACA,YAAMC,QAAAA,GAAW,KAAA,gBAAA,CAAsB,KAAtB,KAAA,EAAkC,KAAnD,KAAiB,CAAjB,CAFwC,CAIxC;AACA;;AACA,YAAMC,kBAAAA,GAAqB,CAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAA3B,UAA2B,CAA3B;AACAA,QAAAA,kBAAAA,CAAAA,OAAAA,CAA2B,UAAA,CAAA,EAAK;AAC9B,cAAMC,WAAAA,GAAAA,aAAwBC,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAAAA,WAAAA,KAA4BA,CAAAA,CAAAA,KAAAA,CAA1D,CAA0DA,CAApDD,CAAN;;AACA,cAAIE,IAAAA,CAAAA,SAAAA,CAAeL,QAAAA,CAAfK,WAAeL,CAAfK,MAA0CA,IAAAA,CAAAA,SAAAA,CAAeJ,QAAAA,CAA7D,WAA6DA,CAAfI,CAA9C,EAAqF;AACnFJ,YAAAA,QAAAA,CAAAA,CAAAA,CAAAA,GAAcA,QAAAA,CAAdA,WAAcA,CAAdA;AACD;AAJHC,SAAAA,EAPwC,CAcxC;AACA;AACA;AACA;;AACA,YAAMI,iBAAAA,GAAoB,CAAA,UAAA,EAAA,YAAA,EAA1B,WAA0B,CAA1B;AACAA,QAAAA,iBAAAA,CAAAA,OAAAA,CAA0B,UAAA,CAAA,EAAK;AAC7B,cAAIN,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBC,QAAAA,CAApB,CAAoBA,CAApB,EAAiC;AAC/B,gBAAMM,QAAAA,GAAWH,CAAAA,CAAAA,OAAAA,CAAAA,MAAAA,EAAjB,EAAiBA,CAAjB;AACA,gBAAMI,UAAAA,GAAgBD,QAAhBC,GAAN,IAAA;AACA,gBAAML,WAAAA,GAAAA,aAAwBK,UAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAAAA,WAAAA,KAAqCA,UAAAA,CAAAA,KAAAA,CAAnE,CAAmEA,CAA7DL,CAAN;AACAF,YAAAA,QAAAA,CAAAA,UAAAA,CAAAA,GAAuBA,QAAAA,CAAvBA,WAAuBA,CAAvBA;AACD;AANHK,SAAAA,EAnBwC,CA4BxC;;AACA,YACEN,QAAAA,CAAAA,IAAAA,KAAkBC,QAAAA,CAAlBD,IAAAA,IACAA,QAAAA,CAAAA,OAAAA,KAAqBC,QAAAA,CADrBD,OAAAA,IAEAA,QAAAA,CAAAA,OAAAA,KAAqBC,QAAAA,CAFrBD,OAAAA,IAGAA,QAAAA,CAAAA,MAAAA,KAAoBC,QAAAA,CAHpBD,MAAAA,IAIAA,QAAAA,CAAAA,QAAAA,KAAsBC,QAAAA,CALxB,QAAA,EAME;AACA,eAAA,gBAAA,CAAsB,KAAA,YAAA,CAAA,QAAA,EAA4BD,QAAAA,CAAAA,IAAAA,KAAkBC,QAAAA,CAApE,IAAsB,CAAtB;AACD;AACF;AA/DU,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,2BAAA;AAAA,MAAA,KAAA,EAAA,SAAA,yBAAA,CAAA,SAAA,EAiE2B;AACpC,YAAMD,QAAAA,GAAW,KAAjB,gBAAiB,EAAjB;AACA,YAAMS,gBAAAA,GAAmB,KAAA,gBAAA,CAAA,EAAA,EAAzB,SAAyB,CAAzB;AAFoC,YAG5BC,kBAH4B,GAGLD,gBAHK,CAAA,kBAAA,CAAA,CAKpC;;AACAA,QAAAA,gBAAAA,CAAAA,MAAAA,GAAAA,KAAAA,CANoC,CAQpC;;AACA,YAAA,kBAAA,EAAwB;AACtB;AACA,cAAME,IAAAA,GAAOC,MAAAA,CAAAA,IAAAA,CAAYH,gBAAAA,CAAzB,QAAaG,CAAb;;AACA,eAAK,IAAIC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIF,IAAAA,CAApB,MAAA,EAAiCE,CAAAA,IAAjC,CAAA,EAAyC;AACvC,gBAAIJ,gBAAAA,CAAAA,QAAAA,CAA0BE,IAAAA,CAA9B,CAA8BA,CAA1BF,CAAJ,EAAwC;AACtCA,cAAAA,gBAAAA,CAAAA,MAAAA,GAAAA,IAAAA;AACA;AACD;AACF;AACF,SAlBmC,CAoBpC;AACA;;;AACA,YACGT,QAAAA,CAAAA,MAAAA,IAAmB,CAACS,gBAAAA,CAArB,MAACT,IACDA,QAAAA,CAAAA,MAAAA,KAAoBS,gBAAAA,CADpB,MAACT,IAEDA,QAAAA,CAAAA,QAAAA,KAAsBS,gBAAAA,CAFtB,QAACT,IAGDA,QAAAA,CAAAA,WAAAA,KAAyBS,gBAAAA,CAHzB,WAACT,IAIA,CAACS,gBAAAA,CAAD,MAAA,IAA4BT,QAAAA,CAAAA,YAAAA,KAA0BS,gBAAAA,CALzD,YAAA,EAME;AACA;AACA,cACGT,QAAAA,CAAAA,MAAAA,KAAoBS,gBAAAA,CAApBT,MAAAA,IAA+C,KAAA,KAAA,CAAhD,uBAACA,IACDA,QAAAA,CAAAA,QAAAA,KAAsBS,gBAAAA,CADtB,QAACT,IAEDA,QAAAA,CAAAA,WAAAA,KAAyBS,gBAAAA,CAFzB,WAACT,IAGAA,QAAAA,CAAAA,UAAAA,IACC,CAACS,gBAAAA,CADFT,MAAAA,IAECA,QAAAA,CAAAA,YAAAA,KAA0BS,gBAAAA,CAF3BT,YAAAA,IAGC,KAAA,KAAA,CAPJ,oBAAA,EAQE;AACAS,YAAAA,gBAAAA,CAAAA,QAAAA,GAAAA,EAAAA;AACD;;AAEDG,UAAAA,MAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,EAAgC,KAAA,aAAA,CAAhCA,gBAAgC,CAAhCA;AACD,SA3CmC,CA6CpC;;;AACA,YAAIZ,QAAAA,CAAAA,QAAAA,KAAsBS,gBAAAA,CAA1B,QAAA,EAAqD;AACnDA,UAAAA,gBAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AACD,SAhDmC,CAkDpC;;;AACA,YAAIA,gBAAAA,CAAJ,UAAA,EAAiC;AAC/BA,UAAAA,gBAAAA,CAAAA,KAAAA,GAAyBA,gBAAAA,CAAAA,MAAAA,GACrBA,gBAAAA,CADqBA,KAAAA,GAErBK,IAAAA,CAAAA,IAAAA,CAAUL,gBAAAA,CAAAA,UAAAA,CAAAA,MAAAA,GAAqCA,gBAAAA,CAFnDA,QAEIK,CAFJL;AAGAA,UAAAA,gBAAAA,CAAAA,IAAAA,GAAwBA,gBAAAA,CAAAA,MAAAA,GAA0BA,gBAAAA,CAA1BA,IAAAA,GAAkDK,IAAAA,CAAAA,GAAAA,CACxEL,gBAAAA,CAAAA,IAAAA,IAAyBA,gBAAAA,CAAzBA,KAAAA,GACIA,gBAAAA,CAAAA,KAAAA,GADJA,CAAAA,GAEIA,gBAAAA,CAHoEK,IAAAA,EAA1EL,CAA0EK,CAA1EL;AAMD;;AAED,eAAA,gBAAA;AACD;AAjIU,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,kBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,gBAAA,CAAA,SAAA,EAAA,EAAA,EAmIsB;AAAA,YAAA,MAAA,GAAA,IAAA;;AAC/B,YAAMT,QAAAA,GAAW,KAAjB,gBAAiB,EAAjB;AACA,YAAMS,gBAAAA,GAAmB,KAAA,yBAAA,CAAzB,SAAyB,CAAzB;AAEA,eAAO,KAAA,QAAA,CAAA,gBAAA,EAAgC,YAAM;AAC3C,cAAA,EAAA,EAAQ;AACNM,YAAAA,EAAAA;AACD;;AACD,cACEf,QAAAA,CAAAA,IAAAA,KAAkBS,gBAAAA,CAAlBT,IAAAA,IACAA,QAAAA,CAAAA,QAAAA,KAAsBS,gBAAAA,CADtBT,QAAAA,IAEAA,QAAAA,CAAAA,MAAAA,KAAoBS,gBAAAA,CAFpBT,MAAAA,IAGAA,QAAAA,CAAAA,QAAAA,KAAsBS,gBAAAA,CAJxB,QAAA,EAKE;AACA,YAAA,MAAA,CAAA,aAAA;AACD;AAXH,SAAO,CAAP;AAaD;AApJU,KAAA,CAAA,CAAA;;AAAA,WAAA,MAAA;AAAA,GAAA,CAAA,IAAA,CAAA;AAAf,CAAA","sourcesContent":["export default Base =>\n  class extends Base {\n    constructor (props) {\n      super(props)\n\n      const defaultState = {\n        page: props.defaultPage,\n        pageSize: props.defaultPageSize,\n        sorted: props.defaultSorted,\n        expanded: props.defaultExpanded,\n        filtered: props.defaultFiltered,\n        resized: props.defaultResized,\n        currentlyResizing: false,\n        skipNextSort: false,\n      }\n      const resolvedState = this.getResolvedState(props, defaultState)\n      const dataModel = this.getDataModel(resolvedState, true)\n\n      this.state = this.calculateNewResolvedState(dataModel)\n    }\n\n    componentDidMount () {\n      this.fireFetchData()\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n      const oldState = this.getResolvedState(prevProps, prevState)\n      const newState = this.getResolvedState(this.props, this.state)\n\n      // Do a deep compare of new and old `defaultOption` and\n      // if they are different reset `option = defaultOption`\n      const defaultableOptions = ['sorted', 'filtered', 'resized', 'expanded']\n      defaultableOptions.forEach(x => {\n        const defaultName = `default${x.charAt(0).toUpperCase() + x.slice(1)}`\n        if (JSON.stringify(oldState[defaultName]) !== JSON.stringify(newState[defaultName])) {\n          newState[x] = newState[defaultName]\n        }\n      })\n\n      // If they change these table options, we need to reset defaults\n      // or else we could get into a state where the user has changed the UI\n      // and then disabled the ability to change it back.\n      // e.g. If `filterable` has changed, set `filtered = defaultFiltered`\n      const resettableOptions = ['sortable', 'filterable', 'resizable']\n      resettableOptions.forEach(x => {\n        if (oldState[x] !== newState[x]) {\n          const baseName = x.replace('able', '')\n          const optionName = `${baseName}ed`\n          const defaultName = `default${optionName.charAt(0).toUpperCase() + optionName.slice(1)}`\n          newState[optionName] = newState[defaultName]\n        }\n      })\n\n      // Props that trigger a data update\n      if (\n        oldState.data !== newState.data ||\n        oldState.columns !== newState.columns ||\n        oldState.pivotBy !== newState.pivotBy ||\n        oldState.sorted !== newState.sorted ||\n        oldState.filtered !== newState.filtered\n      ) {\n        this.setStateWithData(this.getDataModel(newState, oldState.data !== newState.data))\n      }\n    }\n\n    calculateNewResolvedState (dataModel) {\n      const oldState = this.getResolvedState()\n      const newResolvedState = this.getResolvedState({}, dataModel)\n      const { freezeWhenExpanded } = newResolvedState\n\n      // Default to unfrozen state\n      newResolvedState.frozen = false\n\n      // If freezeWhenExpanded is set, check for frozen conditions\n      if (freezeWhenExpanded) {\n        // if any rows are expanded, freeze the existing data and sorting\n        const keys = Object.keys(newResolvedState.expanded)\n        for (let i = 0; i < keys.length; i += 1) {\n          if (newResolvedState.expanded[keys[i]]) {\n            newResolvedState.frozen = true\n            break\n          }\n        }\n      }\n\n      // If the data isn't frozen and either the data or\n      // sorting model has changed, update the data\n      if (\n        (oldState.frozen && !newResolvedState.frozen) ||\n        oldState.sorted !== newResolvedState.sorted ||\n        oldState.filtered !== newResolvedState.filtered ||\n        oldState.showFilters !== newResolvedState.showFilters ||\n        (!newResolvedState.frozen && oldState.resolvedData !== newResolvedState.resolvedData)\n      ) {\n        // Handle collapseOnsortedChange & collapseOnDataChange\n        if (\n          (oldState.sorted !== newResolvedState.sorted && this.props.collapseOnSortingChange) ||\n          oldState.filtered !== newResolvedState.filtered ||\n          oldState.showFilters !== newResolvedState.showFilters ||\n          (oldState.sortedData &&\n            !newResolvedState.frozen &&\n            oldState.resolvedData !== newResolvedState.resolvedData &&\n            this.props.collapseOnDataChange)\n        ) {\n          newResolvedState.expanded = {}\n        }\n\n        Object.assign(newResolvedState, this.getSortedData(newResolvedState))\n      }\n\n      // Set page to 0 if filters change\n      if (oldState.filtered !== newResolvedState.filtered) {\n        newResolvedState.page = 0\n      }\n\n      // Calculate pageSize all the time\n      if (newResolvedState.sortedData) {\n        newResolvedState.pages = newResolvedState.manual\n          ? newResolvedState.pages\n          : Math.ceil(newResolvedState.sortedData.length / newResolvedState.pageSize)\n        newResolvedState.page = newResolvedState.manual ? newResolvedState.page : Math.max(\n          newResolvedState.page >= newResolvedState.pages\n            ? newResolvedState.pages - 1\n            : newResolvedState.page,\n          0\n        )\n      }\n\n      return newResolvedState\n    }\n\n    setStateWithData (dataModel, cb) {\n      const oldState = this.getResolvedState()\n      const newResolvedState = this.calculateNewResolvedState(dataModel)\n\n      return this.setState(newResolvedState, () => {\n        if (cb) {\n          cb()\n        }\n        if (\n          oldState.page !== newResolvedState.page ||\n          oldState.pageSize !== newResolvedState.pageSize ||\n          oldState.sorted !== newResolvedState.sorted ||\n          oldState.filtered !== newResolvedState.filtered\n        ) {\n          this.fireFetchData()\n        }\n      })\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}