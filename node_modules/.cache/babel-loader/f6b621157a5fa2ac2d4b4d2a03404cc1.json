{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport _ from './utils';\nexport default (function (Base) {\n  return function (_Base) {\n    _inherits(_class, _Base);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    _createClass(_class, [{\n      key: 'getResolvedState',\n      value: function getResolvedState(props, state) {\n        var resolvedState = _extends({}, _.compactObject(this.state), _.compactObject(this.props), _.compactObject(state), _.compactObject(props));\n\n        return resolvedState;\n      }\n    }, {\n      key: 'getDataModel',\n      value: function getDataModel(newState, dataChanged) {\n        var _this2 = this;\n\n        var columns = newState.columns,\n            _newState$pivotBy = newState.pivotBy,\n            pivotBy = _newState$pivotBy === undefined ? [] : _newState$pivotBy,\n            data = newState.data,\n            resolveData = newState.resolveData,\n            pivotIDKey = newState.pivotIDKey,\n            pivotValKey = newState.pivotValKey,\n            subRowsKey = newState.subRowsKey,\n            aggregatedKey = newState.aggregatedKey,\n            nestingLevelKey = newState.nestingLevelKey,\n            originalKey = newState.originalKey,\n            indexKey = newState.indexKey,\n            groupedByPivotKey = newState.groupedByPivotKey,\n            SubComponent = newState.SubComponent; // Determine Header Groups\n\n        var hasHeaderGroups = false;\n        columns.forEach(function (column) {\n          if (column.columns) {\n            hasHeaderGroups = true;\n          }\n        });\n        var columnsWithExpander = [].concat(_toConsumableArray(columns));\n        var expanderColumn = columns.find(function (col) {\n          return col.expander || col.columns && col.columns.some(function (col2) {\n            return col2.expander;\n          });\n        }); // The actual expander might be in the columns field of a group column\n\n        if (expanderColumn && !expanderColumn.expander) {\n          expanderColumn = expanderColumn.columns.find(function (col) {\n            return col.expander;\n          });\n        } // If we have SubComponent's we need to make sure we have an expander column\n\n\n        if (SubComponent && !expanderColumn) {\n          expanderColumn = {\n            expander: true\n          };\n          columnsWithExpander = [expanderColumn].concat(_toConsumableArray(columnsWithExpander));\n        }\n\n        var makeDecoratedColumn = function makeDecoratedColumn(column, parentColumn) {\n          var dcol = void 0;\n\n          if (column.expander) {\n            dcol = _extends({}, _this2.props.column, _this2.props.expanderDefaults, column);\n          } else {\n            dcol = _extends({}, _this2.props.column, column);\n          } // Ensure minWidth is not greater than maxWidth if set\n\n\n          if (dcol.maxWidth < dcol.minWidth) {\n            dcol.minWidth = dcol.maxWidth;\n          }\n\n          if (parentColumn) {\n            dcol.parentColumn = parentColumn;\n          } // First check for string accessor\n\n\n          if (typeof dcol.accessor === 'string') {\n            dcol.id = dcol.id || dcol.accessor;\n            var accessorString = dcol.accessor;\n\n            dcol.accessor = function (row) {\n              return _.get(row, accessorString);\n            };\n\n            return dcol;\n          } // Fall back to functional accessor (but require an ID)\n\n\n          if (dcol.accessor && !dcol.id) {\n            console.warn(dcol);\n            throw new Error('A column id is required if using a non-string accessor for column above.');\n          } // Fall back to an undefined accessor\n\n\n          if (!dcol.accessor) {\n            dcol.accessor = function () {\n              return undefined;\n            };\n          }\n\n          return dcol;\n        };\n\n        var allDecoratedColumns = []; // Decorate the columns\n\n        var decorateAndAddToAll = function decorateAndAddToAll(column, parentColumn) {\n          var decoratedColumn = makeDecoratedColumn(column, parentColumn);\n          allDecoratedColumns.push(decoratedColumn);\n          return decoratedColumn;\n        };\n\n        var decoratedColumns = columnsWithExpander.map(function (column) {\n          if (column.columns) {\n            return _extends({}, column, {\n              columns: column.columns.map(function (d) {\n                return decorateAndAddToAll(d, column);\n              })\n            });\n          }\n\n          return decorateAndAddToAll(column);\n        }); // Build the visible columns, headers and flat column list\n\n        var visibleColumns = decoratedColumns.slice();\n        var allVisibleColumns = [];\n        visibleColumns = visibleColumns.map(function (column) {\n          if (column.columns) {\n            var visibleSubColumns = column.columns.filter(function (d) {\n              return pivotBy.indexOf(d.id) > -1 ? false : _.getFirstDefined(d.show, true);\n            });\n            return _extends({}, column, {\n              columns: visibleSubColumns\n            });\n          }\n\n          return column;\n        });\n        visibleColumns = visibleColumns.filter(function (column) {\n          return column.columns ? column.columns.length : pivotBy.indexOf(column.id) > -1 ? false : _.getFirstDefined(column.show, true);\n        }); // Find any custom pivot location\n\n        var pivotIndex = visibleColumns.findIndex(function (col) {\n          return col.pivot;\n        }); // Handle Pivot Columns\n\n        if (pivotBy.length) {\n          // Retrieve the pivot columns in the correct pivot order\n          var pivotColumns = [];\n          pivotBy.forEach(function (pivotID) {\n            var found = allDecoratedColumns.find(function (d) {\n              return d.id === pivotID;\n            });\n\n            if (found) {\n              pivotColumns.push(found);\n            }\n          });\n          var PivotParentColumn = pivotColumns.reduce(function (prev, current) {\n            return prev && prev === current.parentColumn && current.parentColumn;\n          }, pivotColumns[0].parentColumn);\n          var PivotGroupHeader = hasHeaderGroups && PivotParentColumn.Header;\n\n          PivotGroupHeader = PivotGroupHeader || function () {\n            return React.createElement('strong', null, 'Pivoted');\n          };\n\n          var pivotColumnGroup = {\n            Header: PivotGroupHeader,\n            columns: pivotColumns.map(function (col) {\n              return _extends({}, _this2.props.pivotDefaults, col, {\n                pivoted: true\n              });\n            }) // Place the pivotColumns back into the visibleColumns\n\n          };\n\n          if (pivotIndex >= 0) {\n            pivotColumnGroup = _extends({}, visibleColumns[pivotIndex], pivotColumnGroup);\n            visibleColumns.splice(pivotIndex, 1, pivotColumnGroup);\n          } else {\n            visibleColumns.unshift(pivotColumnGroup);\n          }\n        } // Build Header Groups\n\n\n        var headerGroups = [];\n        var currentSpan = []; // A convenience function to add a header and reset the currentSpan\n\n        var addHeader = function addHeader(columns, column) {\n          headerGroups.push(_extends({}, _this2.props.column, column, {\n            columns: columns\n          }));\n          currentSpan = [];\n        }; // Build flast list of allVisibleColumns and HeaderGroups\n\n\n        visibleColumns.forEach(function (column) {\n          if (column.columns) {\n            allVisibleColumns = allVisibleColumns.concat(column.columns);\n\n            if (currentSpan.length > 0) {\n              addHeader(currentSpan);\n            }\n\n            addHeader(column.columns, column);\n            return;\n          }\n\n          allVisibleColumns.push(column);\n          currentSpan.push(column);\n        });\n\n        if (hasHeaderGroups && currentSpan.length > 0) {\n          addHeader(currentSpan);\n        } // Access the data\n\n\n        var accessRow = function accessRow(d, i) {\n          var _row;\n\n          var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n          var row = (_row = {}, _defineProperty(_row, originalKey, d), _defineProperty(_row, indexKey, i), _defineProperty(_row, subRowsKey, d[subRowsKey]), _defineProperty(_row, nestingLevelKey, level), _row);\n          allDecoratedColumns.forEach(function (column) {\n            if (column.expander) return;\n            row[column.id] = column.accessor(d);\n          });\n\n          if (row[subRowsKey]) {\n            row[subRowsKey] = row[subRowsKey].map(function (d, i) {\n              return accessRow(d, i, level + 1);\n            });\n          }\n\n          return row;\n        }; // // If the data hasn't changed, just use the cached data\n\n\n        var resolvedData = this.resolvedData; // If the data has changed, run the data resolver and cache the result\n\n        if (!this.resolvedData || dataChanged) {\n          resolvedData = resolveData(data);\n          this.resolvedData = resolvedData;\n        } // Use the resolved data\n\n\n        resolvedData = resolvedData.map(function (d, i) {\n          return accessRow(d, i);\n        }); // TODO: Make it possible to fabricate nested rows without pivoting\n\n        var aggregatingColumns = allVisibleColumns.filter(function (d) {\n          return !d.expander && d.aggregate;\n        }); // If pivoting, recursively group the data\n\n        var aggregate = function aggregate(rows) {\n          var aggregationValues = {};\n          aggregatingColumns.forEach(function (column) {\n            var values = rows.map(function (d) {\n              return d[column.id];\n            });\n            aggregationValues[column.id] = column.aggregate(values, rows);\n          });\n          return aggregationValues;\n        };\n\n        if (pivotBy.length) {\n          var groupRecursively = function groupRecursively(rows, keys) {\n            var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0; // This is the last level, just return the rows\n\n            if (i === keys.length) {\n              return rows;\n            } // Group the rows together for this level\n\n\n            var groupedRows = Object.entries(_.groupBy(rows, keys[i])).map(function (_ref) {\n              var _ref3;\n\n              var _ref2 = _slicedToArray(_ref, 2),\n                  key = _ref2[0],\n                  value = _ref2[1];\n\n              return _ref3 = {}, _defineProperty(_ref3, pivotIDKey, keys[i]), _defineProperty(_ref3, pivotValKey, key), _defineProperty(_ref3, keys[i], key), _defineProperty(_ref3, subRowsKey, value), _defineProperty(_ref3, nestingLevelKey, i), _defineProperty(_ref3, groupedByPivotKey, true), _ref3;\n            }); // Recurse into the subRows\n\n            groupedRows = groupedRows.map(function (rowGroup) {\n              var _extends2;\n\n              var subRows = groupRecursively(rowGroup[subRowsKey], keys, i + 1);\n              return _extends({}, rowGroup, (_extends2 = {}, _defineProperty(_extends2, subRowsKey, subRows), _defineProperty(_extends2, aggregatedKey, true), _extends2), aggregate(subRows));\n            });\n            return groupedRows;\n          };\n\n          resolvedData = groupRecursively(resolvedData, pivotBy);\n        }\n\n        return _extends({}, newState, {\n          resolvedData: resolvedData,\n          allVisibleColumns: allVisibleColumns,\n          headerGroups: headerGroups,\n          allDecoratedColumns: allDecoratedColumns,\n          hasHeaderGroups: hasHeaderGroups\n        });\n      }\n    }, {\n      key: 'getSortedData',\n      value: function getSortedData(resolvedState) {\n        var manual = resolvedState.manual,\n            sorted = resolvedState.sorted,\n            filtered = resolvedState.filtered,\n            defaultFilterMethod = resolvedState.defaultFilterMethod,\n            resolvedData = resolvedState.resolvedData,\n            allDecoratedColumns = resolvedState.allDecoratedColumns;\n        var sortMethodsByColumnID = {};\n        allDecoratedColumns.filter(function (col) {\n          return col.sortMethod;\n        }).forEach(function (col) {\n          sortMethodsByColumnID[col.id] = col.sortMethod;\n        }); // Resolve the data from either manual data or sorted data\n\n        return {\n          sortedData: manual ? resolvedData : this.sortData(this.filterData(resolvedData, filtered, defaultFilterMethod, allDecoratedColumns), sorted, sortMethodsByColumnID)\n        };\n      }\n    }, {\n      key: 'fireFetchData',\n      value: function fireFetchData() {\n        // determine the current state, preferring certain state values over props\n        var currentState = _extends({}, this.getResolvedState(), {\n          page: this.getStateOrProp('page'),\n          pageSize: this.getStateOrProp('pageSize'),\n          filtered: this.getStateOrProp('filtered')\n        });\n\n        this.props.onFetchData(currentState, this);\n      }\n    }, {\n      key: 'getPropOrState',\n      value: function getPropOrState(key) {\n        return _.getFirstDefined(this.props[key], this.state[key]);\n      }\n    }, {\n      key: 'getStateOrProp',\n      value: function getStateOrProp(key) {\n        return _.getFirstDefined(this.state[key], this.props[key]);\n      }\n    }, {\n      key: 'filterData',\n      value: function filterData(data, filtered, defaultFilterMethod, allVisibleColumns) {\n        var _this3 = this;\n\n        var filteredData = data;\n\n        if (filtered.length) {\n          filteredData = filtered.reduce(function (filteredSoFar, nextFilter) {\n            var column = allVisibleColumns.find(function (x) {\n              return x.id === nextFilter.id;\n            }); // Don't filter hidden columns or columns that have had their filters disabled\n\n            if (!column || column.filterable === false) {\n              return filteredSoFar;\n            }\n\n            var filterMethod = column.filterMethod || defaultFilterMethod; // If 'filterAll' is set to true, pass the entire dataset to the filter method\n\n            if (column.filterAll) {\n              return filterMethod(nextFilter, filteredSoFar, column);\n            }\n\n            return filteredSoFar.filter(function (row) {\n              return filterMethod(nextFilter, row, column);\n            });\n          }, filteredData); // Apply the filter to the subrows if we are pivoting, and then\n          // filter any rows without subcolumns because it would be strange to show\n\n          filteredData = filteredData.map(function (row) {\n            if (!row[_this3.props.subRowsKey]) {\n              return row;\n            }\n\n            return _extends({}, row, _defineProperty({}, _this3.props.subRowsKey, _this3.filterData(row[_this3.props.subRowsKey], filtered, defaultFilterMethod, allVisibleColumns)));\n          }).filter(function (row) {\n            if (!row[_this3.props.subRowsKey]) {\n              return true;\n            }\n\n            return row[_this3.props.subRowsKey].length > 0;\n          });\n        }\n\n        return filteredData;\n      }\n    }, {\n      key: 'sortData',\n      value: function sortData(data, sorted) {\n        var _this4 = this;\n\n        var sortMethodsByColumnID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        if (!sorted.length) {\n          return data;\n        }\n\n        var sortedData = (this.props.orderByMethod || _.orderBy)(data, sorted.map(function (sort) {\n          // Support custom sorting methods for each column\n          if (sortMethodsByColumnID[sort.id]) {\n            return function (a, b) {\n              return sortMethodsByColumnID[sort.id](a[sort.id], b[sort.id], sort.desc);\n            };\n          }\n\n          return function (a, b) {\n            return _this4.props.defaultSortMethod(a[sort.id], b[sort.id], sort.desc);\n          };\n        }), sorted.map(function (d) {\n          return !d.desc;\n        }), this.props.indexKey);\n\n        sortedData.forEach(function (row) {\n          if (!row[_this4.props.subRowsKey]) {\n            return;\n          }\n\n          row[_this4.props.subRowsKey] = _this4.sortData(row[_this4.props.subRowsKey], sorted, sortMethodsByColumnID);\n        });\n        return sortedData;\n      }\n    }, {\n      key: 'getMinRows',\n      value: function getMinRows() {\n        return _.getFirstDefined(this.props.minRows, this.getStateOrProp('pageSize'));\n      } // User actions\n\n    }, {\n      key: 'onPageChange',\n      value: function onPageChange(page) {\n        var _props = this.props,\n            onPageChange = _props.onPageChange,\n            collapseOnPageChange = _props.collapseOnPageChange;\n        var newState = {\n          page: page\n        };\n\n        if (collapseOnPageChange) {\n          newState.expanded = {};\n        }\n\n        this.setStateWithData(newState, function () {\n          return onPageChange && onPageChange(page);\n        });\n      }\n    }, {\n      key: 'onPageSizeChange',\n      value: function onPageSizeChange(newPageSize) {\n        var onPageSizeChange = this.props.onPageSizeChange;\n\n        var _getResolvedState = this.getResolvedState(),\n            pageSize = _getResolvedState.pageSize,\n            page = _getResolvedState.page; // Normalize the page to display\n\n\n        var currentRow = pageSize * page;\n        var newPage = Math.floor(currentRow / newPageSize);\n        this.setStateWithData({\n          pageSize: newPageSize,\n          page: newPage\n        }, function () {\n          return onPageSizeChange && onPageSizeChange(newPageSize, newPage);\n        });\n      }\n    }, {\n      key: 'sortColumn',\n      value: function sortColumn(column, additive) {\n        var _getResolvedState2 = this.getResolvedState(),\n            sorted = _getResolvedState2.sorted,\n            skipNextSort = _getResolvedState2.skipNextSort,\n            defaultSortDesc = _getResolvedState2.defaultSortDesc;\n\n        var firstSortDirection = Object.prototype.hasOwnProperty.call(column, 'defaultSortDesc') ? column.defaultSortDesc : defaultSortDesc;\n        var secondSortDirection = !firstSortDirection; // we can't stop event propagation from the column resize move handlers\n        // attached to the document because of react's synthetic events\n        // so we have to prevent the sort function from actually sorting\n        // if we click on the column resize element within a header.\n\n        if (skipNextSort) {\n          this.setStateWithData({\n            skipNextSort: false\n          });\n          return;\n        }\n\n        var onSortedChange = this.props.onSortedChange;\n\n        var newSorted = _.clone(sorted || []).map(function (d) {\n          d.desc = _.isSortingDesc(d);\n          return d;\n        });\n\n        if (!_.isArray(column)) {\n          // Single-Sort\n          var existingIndex = newSorted.findIndex(function (d) {\n            return d.id === column.id;\n          });\n\n          if (existingIndex > -1) {\n            var existing = newSorted[existingIndex];\n\n            if (existing.desc === secondSortDirection) {\n              if (additive) {\n                newSorted.splice(existingIndex, 1);\n              } else {\n                existing.desc = firstSortDirection;\n                newSorted = [existing];\n              }\n            } else {\n              existing.desc = secondSortDirection;\n\n              if (!additive) {\n                newSorted = [existing];\n              }\n            }\n          } else if (additive) {\n            newSorted.push({\n              id: column.id,\n              desc: firstSortDirection\n            });\n          } else {\n            newSorted = [{\n              id: column.id,\n              desc: firstSortDirection\n            }];\n          }\n        } else {\n          // Multi-Sort\n          var _existingIndex = newSorted.findIndex(function (d) {\n            return d.id === column[0].id;\n          }); // Existing Sorted Column\n\n\n          if (_existingIndex > -1) {\n            var _existing = newSorted[_existingIndex];\n\n            if (_existing.desc === secondSortDirection) {\n              if (additive) {\n                newSorted.splice(_existingIndex, column.length);\n              } else {\n                column.forEach(function (d, i) {\n                  newSorted[_existingIndex + i].desc = firstSortDirection;\n                });\n              }\n            } else {\n              column.forEach(function (d, i) {\n                newSorted[_existingIndex + i].desc = secondSortDirection;\n              });\n            }\n\n            if (!additive) {\n              newSorted = newSorted.slice(_existingIndex, column.length);\n            } // New Sort Column\n\n          } else if (additive) {\n            newSorted = newSorted.concat(column.map(function (d) {\n              return {\n                id: d.id,\n                desc: firstSortDirection\n              };\n            }));\n          } else {\n            newSorted = column.map(function (d) {\n              return {\n                id: d.id,\n                desc: firstSortDirection\n              };\n            });\n          }\n        }\n\n        this.setStateWithData({\n          page: !sorted.length && newSorted.length || !additive ? 0 : this.state.page,\n          sorted: newSorted\n        }, function () {\n          return onSortedChange && onSortedChange(newSorted, column, additive);\n        });\n      }\n    }, {\n      key: 'filterColumn',\n      value: function filterColumn(column, value) {\n        var _getResolvedState3 = this.getResolvedState(),\n            filtered = _getResolvedState3.filtered;\n\n        var onFilteredChange = this.props.onFilteredChange; // Remove old filter first if it exists\n\n        var newFiltering = (filtered || []).filter(function (x) {\n          return x.id !== column.id;\n        });\n\n        if (value !== '') {\n          newFiltering.push({\n            id: column.id,\n            value: value\n          });\n        }\n\n        this.setStateWithData({\n          filtered: newFiltering\n        }, function () {\n          return onFilteredChange && onFilteredChange(newFiltering, column, value);\n        });\n      }\n    }, {\n      key: 'resizeColumnStart',\n      value: function resizeColumnStart(event, column, isTouch) {\n        var _this5 = this;\n\n        event.stopPropagation();\n        var parentWidth = event.target.parentElement.getBoundingClientRect().width;\n        var pageX = void 0;\n\n        if (isTouch) {\n          pageX = event.changedTouches[0].pageX;\n        } else {\n          pageX = event.pageX;\n        }\n\n        this.trapEvents = true;\n        this.setStateWithData({\n          currentlyResizing: {\n            id: column.id,\n            startX: pageX,\n            parentWidth: parentWidth\n          }\n        }, function () {\n          if (isTouch) {\n            document.addEventListener('touchmove', _this5.resizeColumnMoving);\n            document.addEventListener('touchcancel', _this5.resizeColumnEnd);\n            document.addEventListener('touchend', _this5.resizeColumnEnd);\n          } else {\n            document.addEventListener('mousemove', _this5.resizeColumnMoving);\n            document.addEventListener('mouseup', _this5.resizeColumnEnd);\n            document.addEventListener('mouseleave', _this5.resizeColumnEnd);\n          }\n        });\n      }\n    }, {\n      key: 'resizeColumnMoving',\n      value: function resizeColumnMoving(event) {\n        event.stopPropagation();\n        var _props2 = this.props,\n            onResizedChange = _props2.onResizedChange,\n            column = _props2.column;\n\n        var _getResolvedState4 = this.getResolvedState(),\n            resized = _getResolvedState4.resized,\n            currentlyResizing = _getResolvedState4.currentlyResizing,\n            columns = _getResolvedState4.columns;\n\n        var currentColumn = columns.find(function (c) {\n          return c.accessor === currentlyResizing.id || c.id === currentlyResizing.id;\n        });\n        var minResizeWidth = currentColumn && currentColumn.minResizeWidth != null ? currentColumn.minResizeWidth : column.minResizeWidth; // Delete old value\n\n        var newResized = resized.filter(function (x) {\n          return x.id !== currentlyResizing.id;\n        });\n        var pageX = void 0;\n\n        if (event.type === 'touchmove') {\n          pageX = event.changedTouches[0].pageX;\n        } else if (event.type === 'mousemove') {\n          pageX = event.pageX;\n        }\n\n        var newWidth = Math.max(currentlyResizing.parentWidth + pageX - currentlyResizing.startX, minResizeWidth);\n        newResized.push({\n          id: currentlyResizing.id,\n          value: newWidth\n        });\n        this.setStateWithData({\n          resized: newResized\n        }, function () {\n          return onResizedChange && onResizedChange(newResized, event);\n        });\n      }\n    }, {\n      key: 'resizeColumnEnd',\n      value: function resizeColumnEnd(event) {\n        event.stopPropagation();\n        var isTouch = event.type === 'touchend' || event.type === 'touchcancel';\n\n        if (isTouch) {\n          document.removeEventListener('touchmove', this.resizeColumnMoving);\n          document.removeEventListener('touchcancel', this.resizeColumnEnd);\n          document.removeEventListener('touchend', this.resizeColumnEnd);\n        } // If its a touch event clear the mouse one's as well because sometimes\n        // the mouseDown event gets called as well, but the mouseUp event doesn't\n\n\n        document.removeEventListener('mousemove', this.resizeColumnMoving);\n        document.removeEventListener('mouseup', this.resizeColumnEnd);\n        document.removeEventListener('mouseleave', this.resizeColumnEnd); // The touch events don't propagate up to the sorting's onMouseDown event so\n        // no need to prevent it from happening or else the first click after a touch\n        // event resize will not sort the column.\n\n        if (!isTouch) {\n          this.setStateWithData({\n            skipNextSort: true,\n            currentlyResizing: false\n          });\n        }\n      }\n    }]);\n\n    return _class;\n  }(Base);\n});","map":{"version":3,"sources":["../src/methods.js"],"names":["resolvedState","_","columns","pivotBy","data","resolveData","pivotIDKey","pivotValKey","subRowsKey","aggregatedKey","nestingLevelKey","originalKey","indexKey","groupedByPivotKey","SubComponent","newState","hasHeaderGroups","column","columnsWithExpander","expanderColumn","col","col2","expander","makeDecoratedColumn","dcol","accessorString","console","allDecoratedColumns","decorateAndAddToAll","decoratedColumn","decoratedColumns","visibleColumns","allVisibleColumns","visibleSubColumns","d","pivotIndex","pivotColumns","found","PivotParentColumn","prev","current","PivotGroupHeader","pivotColumnGroup","Header","pivoted","headerGroups","currentSpan","addHeader","accessRow","level","row","resolvedData","aggregatingColumns","aggregate","aggregationValues","values","groupRecursively","i","keys","groupedRows","key","value","subRows","rowGroup","manual","sorted","filtered","defaultFilterMethod","sortMethodsByColumnID","sortedData","page","pageSize","filteredData","x","nextFilter","filterMethod","sort","a","b","onPageChange","collapseOnPageChange","onPageSizeChange","currentRow","newPage","Math","skipNextSort","defaultSortDesc","firstSortDirection","Object","secondSortDirection","onSortedChange","newSorted","existingIndex","existing","id","desc","onFilteredChange","newFiltering","event","parentWidth","pageX","currentlyResizing","startX","document","onResizedChange","resized","currentColumn","c","minResizeWidth","newResized","newWidth","isTouch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport _ from './utils'\n\nexport default Base =>\n  class extends Base {\n    getResolvedState (props, state) {\n      const resolvedState = {\n        ..._.compactObject(this.state),\n        ..._.compactObject(this.props),\n        ..._.compactObject(state),\n        ..._.compactObject(props),\n      }\n      return resolvedState\n    }\n\n    getDataModel (newState, dataChanged) {\n      const {\n        columns,\n        pivotBy = [],\n        data,\n        resolveData,\n        pivotIDKey,\n        pivotValKey,\n        subRowsKey,\n        aggregatedKey,\n        nestingLevelKey,\n        originalKey,\n        indexKey,\n        groupedByPivotKey,\n        SubComponent,\n      } = newState\n\n      // Determine Header Groups\n      let hasHeaderGroups = false\n      columns.forEach(column => {\n        if (column.columns) {\n          hasHeaderGroups = true\n        }\n      })\n\n      let columnsWithExpander = [...columns]\n\n      let expanderColumn = columns.find(\n        col => col.expander || (col.columns && col.columns.some(col2 => col2.expander))\n      )\n      // The actual expander might be in the columns field of a group column\n      if (expanderColumn && !expanderColumn.expander) {\n        expanderColumn = expanderColumn.columns.find(col => col.expander)\n      }\n\n      // If we have SubComponent's we need to make sure we have an expander column\n      if (SubComponent && !expanderColumn) {\n        expanderColumn = { expander: true }\n        columnsWithExpander = [expanderColumn, ...columnsWithExpander]\n      }\n\n      const makeDecoratedColumn = (column, parentColumn) => {\n        let dcol\n        if (column.expander) {\n          dcol = {\n            ...this.props.column,\n            ...this.props.expanderDefaults,\n            ...column,\n          }\n        } else {\n          dcol = {\n            ...this.props.column,\n            ...column,\n          }\n        }\n\n        // Ensure minWidth is not greater than maxWidth if set\n        if (dcol.maxWidth < dcol.minWidth) {\n          dcol.minWidth = dcol.maxWidth\n        }\n\n        if (parentColumn) {\n          dcol.parentColumn = parentColumn\n        }\n\n        // First check for string accessor\n        if (typeof dcol.accessor === 'string') {\n          dcol.id = dcol.id || dcol.accessor\n          const accessorString = dcol.accessor\n          dcol.accessor = row => _.get(row, accessorString)\n          return dcol\n        }\n\n        // Fall back to functional accessor (but require an ID)\n        if (dcol.accessor && !dcol.id) {\n          console.warn(dcol)\n          throw new Error(\n            'A column id is required if using a non-string accessor for column above.'\n          )\n        }\n\n        // Fall back to an undefined accessor\n        if (!dcol.accessor) {\n          dcol.accessor = () => undefined\n        }\n\n        return dcol\n      }\n\n      const allDecoratedColumns = []\n\n      // Decorate the columns\n      const decorateAndAddToAll = (column, parentColumn) => {\n        const decoratedColumn = makeDecoratedColumn(column, parentColumn)\n        allDecoratedColumns.push(decoratedColumn)\n        return decoratedColumn\n      }\n\n      const decoratedColumns = columnsWithExpander.map(column => {\n        if (column.columns) {\n          return {\n            ...column,\n            columns: column.columns.map(d => decorateAndAddToAll(d, column)),\n          }\n        }\n        return decorateAndAddToAll(column)\n      })\n\n      // Build the visible columns, headers and flat column list\n      let visibleColumns = decoratedColumns.slice()\n      let allVisibleColumns = []\n\n      visibleColumns = visibleColumns.map(column => {\n        if (column.columns) {\n          const visibleSubColumns = column.columns.filter(d =>\n            pivotBy.indexOf(d.id) > -1 ? false : _.getFirstDefined(d.show, true)\n          )\n          return {\n            ...column,\n            columns: visibleSubColumns,\n          }\n        }\n        return column\n      })\n\n      visibleColumns = visibleColumns.filter(column =>\n        column.columns\n          ? column.columns.length\n          : pivotBy.indexOf(column.id) > -1\n            ? false\n            : _.getFirstDefined(column.show, true)\n      )\n\n      // Find any custom pivot location\n      const pivotIndex = visibleColumns.findIndex(col => col.pivot)\n\n      // Handle Pivot Columns\n      if (pivotBy.length) {\n        // Retrieve the pivot columns in the correct pivot order\n        const pivotColumns = []\n        pivotBy.forEach(pivotID => {\n          const found = allDecoratedColumns.find(d => d.id === pivotID)\n          if (found) {\n            pivotColumns.push(found)\n          }\n        })\n\n        const PivotParentColumn = pivotColumns.reduce(\n          (prev, current) => prev && prev === current.parentColumn && current.parentColumn,\n          pivotColumns[0].parentColumn\n        )\n\n        let PivotGroupHeader = hasHeaderGroups && PivotParentColumn.Header\n        PivotGroupHeader = PivotGroupHeader || (() => <strong>Pivoted</strong>)\n\n        let pivotColumnGroup = {\n          Header: PivotGroupHeader,\n          columns: pivotColumns.map(col => ({\n            ...this.props.pivotDefaults,\n            ...col,\n            pivoted: true,\n          })),\n        }\n\n        // Place the pivotColumns back into the visibleColumns\n        if (pivotIndex >= 0) {\n          pivotColumnGroup = {\n            ...visibleColumns[pivotIndex],\n            ...pivotColumnGroup,\n          }\n          visibleColumns.splice(pivotIndex, 1, pivotColumnGroup)\n        } else {\n          visibleColumns.unshift(pivotColumnGroup)\n        }\n      }\n\n      // Build Header Groups\n      const headerGroups = []\n      let currentSpan = []\n\n      // A convenience function to add a header and reset the currentSpan\n      const addHeader = (columns, column) => {\n        headerGroups.push({\n          ...this.props.column,\n          ...column,\n          columns,\n        })\n        currentSpan = []\n      }\n\n      // Build flast list of allVisibleColumns and HeaderGroups\n      visibleColumns.forEach(column => {\n        if (column.columns) {\n          allVisibleColumns = allVisibleColumns.concat(column.columns)\n          if (currentSpan.length > 0) {\n            addHeader(currentSpan)\n          }\n          addHeader(column.columns, column)\n          return\n        }\n        allVisibleColumns.push(column)\n        currentSpan.push(column)\n      })\n      if (hasHeaderGroups && currentSpan.length > 0) {\n        addHeader(currentSpan)\n      }\n\n      // Access the data\n      const accessRow = (d, i, level = 0) => {\n        const row = {\n          [originalKey]: d,\n          [indexKey]: i,\n          [subRowsKey]: d[subRowsKey],\n          [nestingLevelKey]: level,\n        }\n        allDecoratedColumns.forEach(column => {\n          if (column.expander) return\n          row[column.id] = column.accessor(d)\n        })\n        if (row[subRowsKey]) {\n          row[subRowsKey] = row[subRowsKey].map((d, i) => accessRow(d, i, level + 1))\n        }\n        return row\n      }\n\n      // // If the data hasn't changed, just use the cached data\n      let resolvedData = this.resolvedData\n      // If the data has changed, run the data resolver and cache the result\n      if (!this.resolvedData || dataChanged) {\n        resolvedData = resolveData(data)\n        this.resolvedData = resolvedData\n      }\n      // Use the resolved data\n      resolvedData = resolvedData.map((d, i) => accessRow(d, i))\n\n      // TODO: Make it possible to fabricate nested rows without pivoting\n      const aggregatingColumns = allVisibleColumns.filter(d => !d.expander && d.aggregate)\n\n      // If pivoting, recursively group the data\n      const aggregate = rows => {\n        const aggregationValues = {}\n        aggregatingColumns.forEach(column => {\n          const values = rows.map(d => d[column.id])\n          aggregationValues[column.id] = column.aggregate(values, rows)\n        })\n        return aggregationValues\n      }\n      if (pivotBy.length) {\n        const groupRecursively = (rows, keys, i = 0) => {\n          // This is the last level, just return the rows\n          if (i === keys.length) {\n            return rows\n          }\n          // Group the rows together for this level\n          let groupedRows = Object.entries(_.groupBy(rows, keys[i])).map(([key, value]) => ({\n            [pivotIDKey]: keys[i],\n            [pivotValKey]: key,\n            [keys[i]]: key,\n            [subRowsKey]: value,\n            [nestingLevelKey]: i,\n            [groupedByPivotKey]: true,\n          }))\n          // Recurse into the subRows\n          groupedRows = groupedRows.map(rowGroup => {\n            const subRows = groupRecursively(rowGroup[subRowsKey], keys, i + 1)\n            return {\n              ...rowGroup,\n              [subRowsKey]: subRows,\n              [aggregatedKey]: true,\n              ...aggregate(subRows),\n            }\n          })\n          return groupedRows\n        }\n        resolvedData = groupRecursively(resolvedData, pivotBy)\n      }\n\n      return {\n        ...newState,\n        resolvedData,\n        allVisibleColumns,\n        headerGroups,\n        allDecoratedColumns,\n        hasHeaderGroups,\n      }\n    }\n\n    getSortedData (resolvedState) {\n      const {\n        manual,\n        sorted,\n        filtered,\n        defaultFilterMethod,\n        resolvedData,\n        allDecoratedColumns,\n      } = resolvedState\n\n      const sortMethodsByColumnID = {}\n\n      allDecoratedColumns\n        .filter(col => col.sortMethod)\n        .forEach(col => {\n          sortMethodsByColumnID[col.id] = col.sortMethod\n        })\n\n      // Resolve the data from either manual data or sorted data\n      return {\n        sortedData: manual\n          ? resolvedData\n          : this.sortData(\n            this.filterData(resolvedData, filtered, defaultFilterMethod, allDecoratedColumns),\n            sorted,\n            sortMethodsByColumnID\n          ),\n      }\n    }\n\n    fireFetchData () {\n      // determine the current state, preferring certain state values over props\n      const currentState = {\n        ...this.getResolvedState(),\n        page: this.getStateOrProp('page'),\n        pageSize: this.getStateOrProp('pageSize'),\n        filtered: this.getStateOrProp('filtered'),\n      }\n\n      this.props.onFetchData(currentState, this)\n    }\n\n    getPropOrState (key) {\n      return _.getFirstDefined(this.props[key], this.state[key])\n    }\n\n    getStateOrProp (key) {\n      return _.getFirstDefined(this.state[key], this.props[key])\n    }\n\n    filterData (data, filtered, defaultFilterMethod, allVisibleColumns) {\n      let filteredData = data\n\n      if (filtered.length) {\n        filteredData = filtered.reduce((filteredSoFar, nextFilter) => {\n          const column = allVisibleColumns.find(x => x.id === nextFilter.id)\n\n          // Don't filter hidden columns or columns that have had their filters disabled\n          if (!column || column.filterable === false) {\n            return filteredSoFar\n          }\n\n          const filterMethod = column.filterMethod || defaultFilterMethod\n\n          // If 'filterAll' is set to true, pass the entire dataset to the filter method\n          if (column.filterAll) {\n            return filterMethod(nextFilter, filteredSoFar, column)\n          }\n          return filteredSoFar.filter(row => filterMethod(nextFilter, row, column))\n        }, filteredData)\n\n        // Apply the filter to the subrows if we are pivoting, and then\n        // filter any rows without subcolumns because it would be strange to show\n        filteredData = filteredData\n          .map(row => {\n            if (!row[this.props.subRowsKey]) {\n              return row\n            }\n            return {\n              ...row,\n              [this.props.subRowsKey]: this.filterData(\n                row[this.props.subRowsKey],\n                filtered,\n                defaultFilterMethod,\n                allVisibleColumns\n              ),\n            }\n          })\n          .filter(row => {\n            if (!row[this.props.subRowsKey]) {\n              return true\n            }\n            return row[this.props.subRowsKey].length > 0\n          })\n      }\n\n      return filteredData\n    }\n\n    sortData (data, sorted, sortMethodsByColumnID = {}) {\n      if (!sorted.length) {\n        return data\n      }\n\n      const sortedData = (this.props.orderByMethod || _.orderBy)(\n        data,\n        sorted.map(sort => {\n          // Support custom sorting methods for each column\n          if (sortMethodsByColumnID[sort.id]) {\n            return (a, b) => sortMethodsByColumnID[sort.id](a[sort.id], b[sort.id], sort.desc)\n          }\n          return (a, b) => this.props.defaultSortMethod(a[sort.id], b[sort.id], sort.desc)\n        }),\n        sorted.map(d => !d.desc),\n        this.props.indexKey\n      )\n\n      sortedData.forEach(row => {\n        if (!row[this.props.subRowsKey]) {\n          return\n        }\n        row[this.props.subRowsKey] = this.sortData(\n          row[this.props.subRowsKey],\n          sorted,\n          sortMethodsByColumnID\n        )\n      })\n\n      return sortedData\n    }\n\n    getMinRows () {\n      return _.getFirstDefined(this.props.minRows, this.getStateOrProp('pageSize'))\n    }\n\n    // User actions\n    onPageChange (page) {\n      const { onPageChange, collapseOnPageChange } = this.props\n\n      const newState = { page }\n      if (collapseOnPageChange) {\n        newState.expanded = {}\n      }\n      this.setStateWithData(newState, () => onPageChange && onPageChange(page))\n    }\n\n    onPageSizeChange (newPageSize) {\n      const { onPageSizeChange } = this.props\n      const { pageSize, page } = this.getResolvedState()\n\n      // Normalize the page to display\n      const currentRow = pageSize * page\n      const newPage = Math.floor(currentRow / newPageSize)\n\n      this.setStateWithData(\n        {\n          pageSize: newPageSize,\n          page: newPage,\n        },\n        () => onPageSizeChange && onPageSizeChange(newPageSize, newPage)\n      )\n    }\n\n    sortColumn (column, additive) {\n      const { sorted, skipNextSort, defaultSortDesc } = this.getResolvedState()\n\n      const firstSortDirection = Object.prototype.hasOwnProperty.call(column, 'defaultSortDesc')\n        ? column.defaultSortDesc\n        : defaultSortDesc\n      const secondSortDirection = !firstSortDirection\n\n      // we can't stop event propagation from the column resize move handlers\n      // attached to the document because of react's synthetic events\n      // so we have to prevent the sort function from actually sorting\n      // if we click on the column resize element within a header.\n      if (skipNextSort) {\n        this.setStateWithData({\n          skipNextSort: false,\n        })\n        return\n      }\n\n      const { onSortedChange } = this.props\n\n      let newSorted = _.clone(sorted || []).map(d => {\n        d.desc = _.isSortingDesc(d)\n        return d\n      })\n      if (!_.isArray(column)) {\n        // Single-Sort\n        const existingIndex = newSorted.findIndex(d => d.id === column.id)\n        if (existingIndex > -1) {\n          const existing = newSorted[existingIndex]\n          if (existing.desc === secondSortDirection) {\n            if (additive) {\n              newSorted.splice(existingIndex, 1)\n            } else {\n              existing.desc = firstSortDirection\n              newSorted = [existing]\n            }\n          } else {\n            existing.desc = secondSortDirection\n            if (!additive) {\n              newSorted = [existing]\n            }\n          }\n        } else if (additive) {\n          newSorted.push({\n            id: column.id,\n            desc: firstSortDirection,\n          })\n        } else {\n          newSorted = [\n            {\n              id: column.id,\n              desc: firstSortDirection,\n            },\n          ]\n        }\n      } else {\n        // Multi-Sort\n        const existingIndex = newSorted.findIndex(d => d.id === column[0].id)\n        // Existing Sorted Column\n        if (existingIndex > -1) {\n          const existing = newSorted[existingIndex]\n          if (existing.desc === secondSortDirection) {\n            if (additive) {\n              newSorted.splice(existingIndex, column.length)\n            } else {\n              column.forEach((d, i) => {\n                newSorted[existingIndex + i].desc = firstSortDirection\n              })\n            }\n          } else {\n            column.forEach((d, i) => {\n              newSorted[existingIndex + i].desc = secondSortDirection\n            })\n          }\n          if (!additive) {\n            newSorted = newSorted.slice(existingIndex, column.length)\n          }\n          // New Sort Column\n        } else if (additive) {\n          newSorted = newSorted.concat(\n            column.map(d => ({\n              id: d.id,\n              desc: firstSortDirection,\n            }))\n          )\n        } else {\n          newSorted = column.map(d => ({\n            id: d.id,\n            desc: firstSortDirection,\n          }))\n        }\n      }\n\n      this.setStateWithData(\n        {\n          page: (!sorted.length && newSorted.length) || !additive ? 0 : this.state.page,\n          sorted: newSorted,\n        },\n        () => onSortedChange && onSortedChange(newSorted, column, additive)\n      )\n    }\n\n    filterColumn (column, value) {\n      const { filtered } = this.getResolvedState()\n      const { onFilteredChange } = this.props\n\n      // Remove old filter first if it exists\n      const newFiltering = (filtered || []).filter(x => x.id !== column.id)\n\n      if (value !== '') {\n        newFiltering.push({\n          id: column.id,\n          value,\n        })\n      }\n\n      this.setStateWithData(\n        {\n          filtered: newFiltering,\n        },\n        () => onFilteredChange && onFilteredChange(newFiltering, column, value)\n      )\n    }\n\n    resizeColumnStart (event, column, isTouch) {\n      event.stopPropagation()\n      const parentWidth = event.target.parentElement.getBoundingClientRect().width\n\n      let pageX\n      if (isTouch) {\n        pageX = event.changedTouches[0].pageX\n      } else {\n        pageX = event.pageX\n      }\n\n      this.trapEvents = true\n      this.setStateWithData(\n        {\n          currentlyResizing: {\n            id: column.id,\n            startX: pageX,\n            parentWidth,\n          },\n        },\n        () => {\n          if (isTouch) {\n            document.addEventListener('touchmove', this.resizeColumnMoving)\n            document.addEventListener('touchcancel', this.resizeColumnEnd)\n            document.addEventListener('touchend', this.resizeColumnEnd)\n          } else {\n            document.addEventListener('mousemove', this.resizeColumnMoving)\n            document.addEventListener('mouseup', this.resizeColumnEnd)\n            document.addEventListener('mouseleave', this.resizeColumnEnd)\n          }\n        }\n      )\n    }\n\n    resizeColumnMoving (event) {\n      event.stopPropagation()\n      const { onResizedChange, column } = this.props\n      const { resized, currentlyResizing, columns } = this.getResolvedState()\n      const currentColumn = columns.find(\n        c => c.accessor === currentlyResizing.id || c.id === currentlyResizing.id\n      )\n      const minResizeWidth =\n        currentColumn && currentColumn.minResizeWidth != null\n          ? currentColumn.minResizeWidth\n          : column.minResizeWidth\n\n      // Delete old value\n      const newResized = resized.filter(x => x.id !== currentlyResizing.id)\n\n      let pageX\n\n      if (event.type === 'touchmove') {\n        pageX = event.changedTouches[0].pageX\n      } else if (event.type === 'mousemove') {\n        pageX = event.pageX\n      }\n\n      const newWidth = Math.max(\n        currentlyResizing.parentWidth + pageX - currentlyResizing.startX,\n        minResizeWidth\n      )\n\n      newResized.push({\n        id: currentlyResizing.id,\n        value: newWidth,\n      })\n\n      this.setStateWithData(\n        {\n          resized: newResized,\n        },\n        () => onResizedChange && onResizedChange(newResized, event)\n      )\n    }\n\n    resizeColumnEnd (event) {\n      event.stopPropagation()\n      const isTouch = event.type === 'touchend' || event.type === 'touchcancel'\n\n      if (isTouch) {\n        document.removeEventListener('touchmove', this.resizeColumnMoving)\n        document.removeEventListener('touchcancel', this.resizeColumnEnd)\n        document.removeEventListener('touchend', this.resizeColumnEnd)\n      }\n\n      // If its a touch event clear the mouse one's as well because sometimes\n      // the mouseDown event gets called as well, but the mouseUp event doesn't\n      document.removeEventListener('mousemove', this.resizeColumnMoving)\n      document.removeEventListener('mouseup', this.resizeColumnEnd)\n      document.removeEventListener('mouseleave', this.resizeColumnEnd)\n\n      // The touch events don't propagate up to the sorting's onMouseDown event so\n      // no need to prevent it from happening or else the first click after a touch\n      // event resize will not sort the column.\n      if (!isTouch) {\n        this.setStateWithData({\n          skipNextSort: true,\n          currentlyResizing: false,\n        })\n      }\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}